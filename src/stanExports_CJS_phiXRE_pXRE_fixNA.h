// Generated by rstantools.  Do not edit by hand.

/*
    CJStan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    CJStan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with CJStan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
#ifndef USE_STANC3
#define USE_STANC3
#endif
// Code generated by stanc v2.26.1
#include <stan/model/model_header.hpp>
namespace model_CJS_phiXRE_pXRE_fixNA_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 75, column 2 to column 25)",
                                                      " (in 'string', line 76, column 2 to column 29)",
                                                      " (in 'string', line 77, column 2 to column 25)",
                                                      " (in 'string', line 78, column 2 to column 20)",
                                                      " (in 'string', line 79, column 2 to column 23)",
                                                      " (in 'string', line 80, column 2 to column 18)",
                                                      " (in 'string', line 83, column 2 to column 21)",
                                                      " (in 'string', line 84, column 2 to column 16)",
                                                      " (in 'string', line 85, column 2 to column 20)",
                                                      " (in 'string', line 86, column 2 to column 16)",
                                                      " (in 'string', line 87, column 2 to column 16)",
                                                      " (in 'string', line 89, column 2 to column 15)",
                                                      " (in 'string', line 92, column 2 to column 31)",
                                                      " (in 'string', line 93, column 2 to column 26)",
                                                      " (in 'string', line 96, column 4 to column 19)",
                                                      " (in 'string', line 97, column 4 to column 17)",
                                                      " (in 'string', line 103, column 10 to column 39)",
                                                      " (in 'string', line 104, column 10 to column 22)",
                                                      " (in 'string', line 102, column 8 to line 105, column 9)",
                                                      " (in 'string', line 101, column 8 to line 105, column 9)",
                                                      " (in 'string', line 100, column 6 to line 105, column 9)",
                                                      " (in 'string', line 110, column 10 to column 31)",
                                                      " (in 'string', line 111, column 10 to column 20)",
                                                      " (in 'string', line 109, column 8 to line 112, column 9)",
                                                      " (in 'string', line 108, column 8 to line 112, column 9)",
                                                      " (in 'string', line 107, column 6 to line 112, column 9)",
                                                      " (in 'string', line 99, column 4 to line 113, column 5)",
                                                      " (in 'string', line 98, column 4 to line 113, column 5)",
                                                      " (in 'string', line 95, column 2 to line 114, column 3)",
                                                      " (in 'string', line 119, column 4 to column 110)",
                                                      " (in 'string', line 118, column 2 to line 119, column 110)",
                                                      " (in 'string', line 121, column 4 to column 104)",
                                                      " (in 'string', line 120, column 2 to line 121, column 104)",
                                                      " (in 'string', line 123, column 2 to column 23)",
                                                      " (in 'string', line 131, column 8 to column 40)",
                                                      " (in 'string', line 132, column 8 to column 56)",
                                                      " (in 'string', line 130, column 6 to line 133, column 7)",
                                                      " (in 'string', line 129, column 6 to line 133, column 7)",
                                                      " (in 'string', line 128, column 4 to line 134, column 5)",
                                                      " (in 'string', line 127, column 4 to line 134, column 5)",
                                                      " (in 'string', line 135, column 4 to column 54)",
                                                      " (in 'string', line 136, column 4 to column 32)",
                                                      " (in 'string', line 126, column 2 to line 137, column 3)",
                                                      " (in 'string', line 125, column 2 to line 137, column 3)",
                                                      " (in 'string', line 156, column 2 to column 28)",
                                                      " (in 'string', line 157, column 2 to column 18)",
                                                      " (in 'string', line 159, column 2 to column 44)",
                                                      " (in 'string', line 160, column 2 to column 31)",
                                                      " (in 'string', line 141, column 2 to column 36)",
                                                      " (in 'string', line 143, column 4 to column 36)",
                                                      " (in 'string', line 142, column 2 to line 143, column 36)",
                                                      " (in 'string', line 144, column 2 to column 22)",
                                                      " (in 'string', line 145, column 2 to column 32)",
                                                      " (in 'string', line 146, column 2 to column 33)",
                                                      " (in 'string', line 148, column 4 to column 35)",
                                                      " (in 'string', line 147, column 2 to line 148, column 35)",
                                                      " (in 'string', line 149, column 2 to column 18)",
                                                      " (in 'string', line 150, column 2 to column 29)",
                                                      " (in 'string', line 153, column 2 to column 20)",
                                                      " (in 'string', line 38, column 2 to column 17)",
                                                      " (in 'string', line 39, column 2 to column 17)",
                                                      " (in 'string', line 40, column 2 to column 17)",
                                                      " (in 'string', line 41, column 9 to column 10)",
                                                      " (in 'string', line 41, column 11 to column 12)",
                                                      " (in 'string', line 41, column 2 to column 16)",
                                                      " (in 'string', line 42, column 32 to column 33)",
                                                      " (in 'string', line 42, column 34 to column 37)",
                                                      " (in 'string', line 42, column 2 to column 39)",
                                                      " (in 'string', line 43, column 25 to column 26)",
                                                      " (in 'string', line 43, column 27 to column 30)",
                                                      " (in 'string', line 43, column 2 to column 32)",
                                                      " (in 'string', line 44, column 38 to column 41)",
                                                      " (in 'string', line 44, column 26 to column 27)",
                                                      " (in 'string', line 44, column 2 to column 43)",
                                                      " (in 'string', line 45, column 30 to column 31)",
                                                      " (in 'string', line 45, column 32 to column 33)",
                                                      " (in 'string', line 45, column 2 to column 35)",
                                                      " (in 'string', line 46, column 23 to column 24)",
                                                      " (in 'string', line 46, column 25 to column 26)",
                                                      " (in 'string', line 46, column 2 to column 28)",
                                                      " (in 'string', line 47, column 36 to column 37)",
                                                      " (in 'string', line 47, column 26 to column 27)",
                                                      " (in 'string', line 47, column 2 to column 39)",
                                                      " (in 'string', line 48, column 25 to column 26)",
                                                      " (in 'string', line 48, column 27 to column 28)",
                                                      " (in 'string', line 48, column 2 to column 30)",
                                                      " (in 'string', line 49, column 17 to column 18)",
                                                      " (in 'string', line 49, column 2 to column 20)",
                                                      " (in 'string', line 52, column 2 to column 50)",
                                                      " (in 'string', line 53, column 2 to column 46)",
                                                      " (in 'string', line 54, column 2 to column 51)",
                                                      " (in 'string', line 55, column 2 to column 47)",
                                                      " (in 'string', line 56, column 26 to column 29)",
                                                      " (in 'string', line 56, column 2 to column 42)",
                                                      " (in 'string', line 57, column 26 to column 27)",
                                                      " (in 'string', line 57, column 2 to column 38)",
                                                      " (in 'string', line 58, column 29 to column 30)",
                                                      " (in 'string', line 58, column 2 to column 32)",
                                                      " (in 'string', line 59, column 28 to column 29)",
                                                      " (in 'string', line 59, column 2 to column 31)",
                                                      " (in 'string', line 60, column 42 to column 43)",
                                                      " (in 'string', line 60, column 2 to column 45)",
                                                      " (in 'string', line 63, column 4 to column 60)",
                                                      " (in 'string', line 62, column 2 to line 63, column 60)",
                                                      " (in 'string', line 65, column 4 to column 54)",
                                                      " (in 'string', line 64, column 2 to line 65, column 54)",
                                                      " (in 'string', line 69, column 4 to column 36)",
                                                      " (in 'string', line 70, column 4 to column 34)",
                                                      " (in 'string', line 71, column 4 to column 45)",
                                                      " (in 'string', line 68, column 2 to line 72, column 3)",
                                                      " (in 'string', line 67, column 2 to line 72, column 3)",
                                                      " (in 'string', line 75, column 9 to column 14)",
                                                      " (in 'string', line 76, column 18 to column 21)",
                                                      " (in 'string', line 77, column 9 to column 14)",
                                                      " (in 'string', line 77, column 15 to column 18)",
                                                      " (in 'string', line 78, column 9 to column 12)",
                                                      " (in 'string', line 79, column 18 to column 19)",
                                                      " (in 'string', line 80, column 9 to column 12)",
                                                      " (in 'string', line 80, column 13 to column 14)",
                                                      " (in 'string', line 83, column 9 to column 10)",
                                                      " (in 'string', line 83, column 11 to column 14)",
                                                      " (in 'string', line 84, column 9 to column 10)",
                                                      " (in 'string', line 84, column 11 to column 12)",
                                                      " (in 'string', line 85, column 9 to column 10)",
                                                      " (in 'string', line 85, column 11 to column 14)",
                                                      " (in 'string', line 86, column 9 to column 10)",
                                                      " (in 'string', line 86, column 11 to column 12)",
                                                      " (in 'string', line 87, column 9 to column 10)",
                                                      " (in 'string', line 89, column 9 to column 10)",
                                                      " (in 'string', line 156, column 9 to column 14)",
                                                      " (in 'string', line 156, column 15 to column 18)",
                                                      " (in 'string', line 157, column 9 to column 12)",
                                                      " (in 'string', line 157, column 13 to column 14)",
                                                      " (in 'string', line 9, column 8 to column 17)",
                                                      " (in 'string', line 8, column 6 to line 9, column 17)",
                                                      " (in 'string', line 7, column 4 to line 9, column 17)",
                                                      " (in 'string', line 10, column 4 to column 13)",
                                                      " (in 'string', line 6, column 31 to line 11, column 3)",
                                                      " (in 'string', line 16, column 6 to column 32)",
                                                      " (in 'string', line 18, column 8 to column 17)",
                                                      " (in 'string', line 17, column 6 to line 18, column 17)",
                                                      " (in 'string', line 15, column 4 to line 19, column 5)",
                                                      " (in 'string', line 14, column 4 to line 19, column 5)",
                                                      " (in 'string', line 20, column 4 to column 13)",
                                                      " (in 'string', line 13, column 30 to line 21, column 3)",
                                                      " (in 'string', line 24, column 4 to column 28)",
                                                      " (in 'string', line 25, column 15 to column 16)",
                                                      " (in 'string', line 25, column 4 to column 22)",
                                                      " (in 'string', line 27, column 4 to column 17)",
                                                      " (in 'string', line 30, column 6 to column 25)",
                                                      " (in 'string', line 31, column 6 to column 30)",
                                                      " (in 'string', line 32, column 6 to column 84)",
                                                      " (in 'string', line 29, column 4 to line 33, column 5)",
                                                      " (in 'string', line 28, column 4 to line 33, column 5)",
                                                      " (in 'string', line 34, column 4 to column 21)",
                                                      " (in 'string', line 23, column 63 to line 35, column 3)"};
int
first_capture(const std::vector<int>& y_i, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 136;
    for (int t = 1; t <= size(y_i); ++t) {
      current_statement__ = 135;
      if (y_i[(t - 1)]) {
        current_statement__ = 134;
        return t;
      } }
    current_statement__ = 137;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct first_capture_functor__ {
int
operator()(const std::vector<int>& y_i, std::ostream* pstream__)  const 
{
return first_capture(y_i, pstream__);
}
};
int
last_capture(const std::vector<int>& y_i, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 143;
    for (int t_rev = 0; t_rev <= (size(y_i) - 1); ++t_rev) {
      int t;
      t = std::numeric_limits<int>::min();
      
      current_statement__ = 139;
      t = (size(y_i) - t_rev);
      current_statement__ = 141;
      if (y_i[(t - 1)]) {
        current_statement__ = 140;
        return t;
      } }
    current_statement__ = 144;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct last_capture_functor__ {
int
operator()(const std::vector<int>& y_i, std::ostream* pstream__)  const 
{
return last_capture(y_i, pstream__);
}
};
template <typename T1__, typename T2__>
stan::promote_args_t<stan::value_type_t<T1__>,
stan::value_type_t<T2__>>
prob_uncaptured(const int& last, const T1__& p_arg__, const T2__& phi_arg__,
                std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T1__>,
          stan::value_type_t<T2__>>;
  const auto& p = to_ref(p_arg__);
  const auto& phi = to_ref(phi_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int T;
    T = std::numeric_limits<int>::min();
    
    current_statement__ = 146;
    T = num_elements(p);
    current_statement__ = 147;
    validate_non_negative_index("chi", "T", T);
    Eigen::Matrix<local_scalar_t__, 1, -1> chi;
    chi = Eigen::Matrix<local_scalar_t__, 1, -1>(T);
    stan::math::fill(chi, DUMMY_VAR__);
    
    current_statement__ = 149;
    assign(chi, cons_list(index_uni(T), nil_index_list()), 1.0,
      "assigning variable chi");
    current_statement__ = 154;
    for (int t = 1; t <= (T - last); ++t) {
      int t_curr;
      t_curr = std::numeric_limits<int>::min();
      
      current_statement__ = 150;
      t_curr = (T - t);
      int t_next;
      t_next = std::numeric_limits<int>::min();
      
      current_statement__ = 151;
      t_next = (t_curr + 1);
      current_statement__ = 152;
      assign(chi, cons_list(index_uni(t_curr), nil_index_list()),
        ((1 - phi[(t_curr - 1)]) +
          ((phi[(t_curr - 1)] * (1 - p[(t_next - 1)])) * chi[(t_next - 1)])),
        "assigning variable chi");}
    current_statement__ = 155;
    return chi[(last - 1)];
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct prob_uncaptured_functor__ {
template <typename T1__, typename T2__>
stan::promote_args_t<stan::value_type_t<T1__>,
stan::value_type_t<T2__>>
operator()(const int& last, const T1__& p, const T2__& phi,
           std::ostream* pstream__)  const 
{
return prob_uncaptured(last, p, phi, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_CJS_phiXRE_pXRE_fixNA final : public model_base_crtp<model_CJS_phiXRE_pXRE_fixNA> {
 private:
  int T;
  int M;
  int K;
  Eigen::Matrix<double, -1, -1> X;
  std::vector<std::vector<int>> indX_phi;
  std::vector<std::vector<int>> group_phi;
  std::vector<Eigen::Matrix<double, -1, 1>> fix_phi0;
  std::vector<std::vector<int>> indX_p;
  std::vector<std::vector<int>> group_p;
  std::vector<Eigen::Matrix<double, -1, 1>> fix_p1;
  std::vector<std::vector<int>> y;
  std::vector<int> n;
  int K_phi;
  int K_p;
  int J_phi;
  int J_p;
  Eigen::Matrix<double, -1, 1> random_phi;
  Eigen::Matrix<double, -1, 1> random_p;
  std::vector<int> first;
  std::vector<int> last;
  std::vector<int> last_minus_first;
  int sigma_1dim__;
  int zeta_2dim__;
  int beta_2dim__;
  int phi_2dim__;
  int epsilon_2dim__;
 
 public:
  ~model_CJS_phiXRE_pXRE_fixNA() { }
  
  inline std::string model_name() const final { return "model_CJS_phiXRE_pXRE_fixNA"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1", "stancflags = "};
  }
  
  
  model_CJS_phiXRE_pXRE_fixNA(stan::io::var_context& context__,
                              unsigned int random_seed__ = 0,
                              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_CJS_phiXRE_pXRE_fixNA_namespace::model_CJS_phiXRE_pXRE_fixNA";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 60;
      context__.validate_dims("data initialization","T","int",
          context__.to_vec());
      T = std::numeric_limits<int>::min();
      
      current_statement__ = 60;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 60;
      current_statement__ = 60;
      check_greater_or_equal(function__, "T", T, 2);
      current_statement__ = 61;
      context__.validate_dims("data initialization","M","int",
          context__.to_vec());
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 61;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 61;
      current_statement__ = 61;
      check_greater_or_equal(function__, "M", M, 0);
      current_statement__ = 62;
      context__.validate_dims("data initialization","K","int",
          context__.to_vec());
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 62;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 62;
      current_statement__ = 62;
      check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 63;
      validate_non_negative_index("X", "M", M);
      current_statement__ = 64;
      validate_non_negative_index("X", "K", K);
      current_statement__ = 65;
      context__.validate_dims("data initialization","X","double",
          context__.to_vec(M, K));
      X = Eigen::Matrix<double, -1, -1>(M, K);
      stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 65;
        assign(X_flat__, nil_index_list(), context__.vals_r("X"),
          "assigning variable X_flat__");
        current_statement__ = 65;
        pos__ = 1;
        current_statement__ = 65;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 65;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 65;
            assign(X,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_flat__[(pos__ - 1)], "assigning variable X");
            current_statement__ = 65;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 66;
      validate_non_negative_index("indX_phi", "K", K);
      current_statement__ = 67;
      validate_non_negative_index("indX_phi", "T - 1", (T - 1));
      current_statement__ = 68;
      context__.validate_dims("data initialization","indX_phi","int",
          context__.to_vec(K, (T - 1)));
      indX_phi = std::vector<std::vector<int>>(K, std::vector<int>((T - 1), std::numeric_limits<int>::min()));
      
      {
        std::vector<int> indX_phi_flat__;
        current_statement__ = 68;
        assign(indX_phi_flat__, nil_index_list(),
          context__.vals_i("indX_phi"), "assigning variable indX_phi_flat__");
        current_statement__ = 68;
        pos__ = 1;
        current_statement__ = 68;
        for (int sym1__ = 1; sym1__ <= (T - 1); ++sym1__) {
          current_statement__ = 68;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 68;
            assign(indX_phi,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              indX_phi_flat__[(pos__ - 1)], "assigning variable indX_phi");
            current_statement__ = 68;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 68;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 68;
        for (int sym2__ = 1; sym2__ <= (T - 1); ++sym2__) {
          current_statement__ = 68;
          current_statement__ = 68;
          check_greater_or_equal(function__, "indX_phi[sym1__, sym2__]",
                                 indX_phi[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 68;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 68;
        for (int sym2__ = 1; sym2__ <= (T - 1); ++sym2__) {
          current_statement__ = 68;
          current_statement__ = 68;
          check_less_or_equal(function__, "indX_phi[sym1__, sym2__]",
                              indX_phi[(sym1__ - 1)][(sym2__ - 1)], 1);}}
      current_statement__ = 69;
      validate_non_negative_index("group_phi", "M", M);
      current_statement__ = 70;
      validate_non_negative_index("group_phi", "T - 1", (T - 1));
      current_statement__ = 71;
      context__.validate_dims("data initialization","group_phi","int",
          context__.to_vec(M, (T - 1)));
      group_phi = std::vector<std::vector<int>>(M, std::vector<int>((T - 1), std::numeric_limits<int>::min()));
      
      {
        std::vector<int> group_phi_flat__;
        current_statement__ = 71;
        assign(group_phi_flat__, nil_index_list(),
          context__.vals_i("group_phi"),
          "assigning variable group_phi_flat__");
        current_statement__ = 71;
        pos__ = 1;
        current_statement__ = 71;
        for (int sym1__ = 1; sym1__ <= (T - 1); ++sym1__) {
          current_statement__ = 71;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 71;
            assign(group_phi,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              group_phi_flat__[(pos__ - 1)], "assigning variable group_phi");
            current_statement__ = 71;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 71;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 71;
        for (int sym2__ = 1; sym2__ <= (T - 1); ++sym2__) {
          current_statement__ = 71;
          current_statement__ = 71;
          check_greater_or_equal(function__, "group_phi[sym1__, sym2__]",
                                 group_phi[(sym1__ - 1)][(sym2__ - 1)], 1);}}
      current_statement__ = 72;
      validate_non_negative_index("fix_phi0", "T - 1", (T - 1));
      current_statement__ = 73;
      validate_non_negative_index("fix_phi0", "M", M);
      current_statement__ = 74;
      context__.validate_dims("data initialization","fix_phi0","double",
          context__.to_vec((T - 1), M));
      fix_phi0 = std::vector<Eigen::Matrix<double, -1, 1>>((T - 1), Eigen::Matrix<double, -1, 1>(M));
      stan::math::fill(fix_phi0, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> fix_phi0_flat__;
        current_statement__ = 74;
        assign(fix_phi0_flat__, nil_index_list(),
          context__.vals_r("fix_phi0"), "assigning variable fix_phi0_flat__");
        current_statement__ = 74;
        pos__ = 1;
        current_statement__ = 74;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 74;
          for (int sym2__ = 1; sym2__ <= (T - 1); ++sym2__) {
            current_statement__ = 74;
            assign(fix_phi0,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              fix_phi0_flat__[(pos__ - 1)], "assigning variable fix_phi0");
            current_statement__ = 74;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 74;
      for (int sym1__ = 1; sym1__ <= (T - 1); ++sym1__) {
        current_statement__ = 74;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 74;
          current_statement__ = 74;
          check_greater_or_equal(function__, "fix_phi0[sym1__, sym2__]",
                                 fix_phi0[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 74;
      for (int sym1__ = 1; sym1__ <= (T - 1); ++sym1__) {
        current_statement__ = 74;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 74;
          current_statement__ = 74;
          check_less_or_equal(function__, "fix_phi0[sym1__, sym2__]",
                              fix_phi0[(sym1__ - 1)][(sym2__ - 1)], 1);}}
      current_statement__ = 75;
      validate_non_negative_index("indX_p", "K", K);
      current_statement__ = 76;
      validate_non_negative_index("indX_p", "T", T);
      current_statement__ = 77;
      context__.validate_dims("data initialization","indX_p","int",
          context__.to_vec(K, T));
      indX_p = std::vector<std::vector<int>>(K, std::vector<int>(T, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> indX_p_flat__;
        current_statement__ = 77;
        assign(indX_p_flat__, nil_index_list(), context__.vals_i("indX_p"),
          "assigning variable indX_p_flat__");
        current_statement__ = 77;
        pos__ = 1;
        current_statement__ = 77;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 77;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 77;
            assign(indX_p,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              indX_p_flat__[(pos__ - 1)], "assigning variable indX_p");
            current_statement__ = 77;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 77;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 77;
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          current_statement__ = 77;
          current_statement__ = 77;
          check_greater_or_equal(function__, "indX_p[sym1__, sym2__]",
                                 indX_p[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 77;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 77;
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          current_statement__ = 77;
          current_statement__ = 77;
          check_less_or_equal(function__, "indX_p[sym1__, sym2__]",
                              indX_p[(sym1__ - 1)][(sym2__ - 1)], 1);}}
      current_statement__ = 78;
      validate_non_negative_index("group_p", "M", M);
      current_statement__ = 79;
      validate_non_negative_index("group_p", "T", T);
      current_statement__ = 80;
      context__.validate_dims("data initialization","group_p","int",
          context__.to_vec(M, T));
      group_p = std::vector<std::vector<int>>(M, std::vector<int>(T, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> group_p_flat__;
        current_statement__ = 80;
        assign(group_p_flat__, nil_index_list(), context__.vals_i("group_p"),
          "assigning variable group_p_flat__");
        current_statement__ = 80;
        pos__ = 1;
        current_statement__ = 80;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 80;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 80;
            assign(group_p,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              group_p_flat__[(pos__ - 1)], "assigning variable group_p");
            current_statement__ = 80;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 80;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 80;
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          current_statement__ = 80;
          current_statement__ = 80;
          check_greater_or_equal(function__, "group_p[sym1__, sym2__]",
                                 group_p[(sym1__ - 1)][(sym2__ - 1)], 1);}}
      current_statement__ = 81;
      validate_non_negative_index("fix_p1", "T", T);
      current_statement__ = 82;
      validate_non_negative_index("fix_p1", "M", M);
      current_statement__ = 83;
      context__.validate_dims("data initialization","fix_p1","double",
          context__.to_vec(T, M));
      fix_p1 = std::vector<Eigen::Matrix<double, -1, 1>>(T, Eigen::Matrix<double, -1, 1>(M));
      stan::math::fill(fix_p1, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> fix_p1_flat__;
        current_statement__ = 83;
        assign(fix_p1_flat__, nil_index_list(), context__.vals_r("fix_p1"),
          "assigning variable fix_p1_flat__");
        current_statement__ = 83;
        pos__ = 1;
        current_statement__ = 83;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 83;
          for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
            current_statement__ = 83;
            assign(fix_p1,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              fix_p1_flat__[(pos__ - 1)], "assigning variable fix_p1");
            current_statement__ = 83;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 83;
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 83;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 83;
          current_statement__ = 83;
          check_greater_or_equal(function__, "fix_p1[sym1__, sym2__]",
                                 fix_p1[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 83;
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 83;
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          current_statement__ = 83;
          current_statement__ = 83;
          check_less_or_equal(function__, "fix_p1[sym1__, sym2__]",
                              fix_p1[(sym1__ - 1)][(sym2__ - 1)], 1);}}
      current_statement__ = 84;
      validate_non_negative_index("y", "M", M);
      current_statement__ = 85;
      validate_non_negative_index("y", "T", T);
      current_statement__ = 86;
      context__.validate_dims("data initialization","y","int",
          context__.to_vec(M, T));
      y = std::vector<std::vector<int>>(M, std::vector<int>(T, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> y_flat__;
        current_statement__ = 86;
        assign(y_flat__, nil_index_list(), context__.vals_i("y"),
          "assigning variable y_flat__");
        current_statement__ = 86;
        pos__ = 1;
        current_statement__ = 86;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 86;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 86;
            assign(y,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              y_flat__[(pos__ - 1)], "assigning variable y");
            current_statement__ = 86;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 86;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 86;
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          current_statement__ = 86;
          current_statement__ = 86;
          check_greater_or_equal(function__, "y[sym1__, sym2__]",
                                 y[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 86;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 86;
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          current_statement__ = 86;
          current_statement__ = 86;
          check_less_or_equal(function__, "y[sym1__, sym2__]",
                              y[(sym1__ - 1)][(sym2__ - 1)], 1);}}
      current_statement__ = 87;
      validate_non_negative_index("n", "M", M);
      current_statement__ = 88;
      context__.validate_dims("data initialization","n","int",
          context__.to_vec(M));
      n = std::vector<int>(M, std::numeric_limits<int>::min());
      
      current_statement__ = 88;
      assign(n, nil_index_list(), context__.vals_i("n"),
        "assigning variable n");
      current_statement__ = 88;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 88;
        current_statement__ = 88;
        check_greater_or_equal(function__, "n[sym1__]", n[(sym1__ - 1)], 1);}
      current_statement__ = 89;
      K_phi = std::numeric_limits<int>::min();
      
      current_statement__ = 89;
      K_phi = sum(to_array_1d(indX_phi));
      current_statement__ = 90;
      K_p = std::numeric_limits<int>::min();
      
      current_statement__ = 90;
      K_p = sum(to_array_1d(indX_p));
      current_statement__ = 91;
      J_phi = std::numeric_limits<int>::min();
      
      current_statement__ = 91;
      J_phi = max(to_array_1d(group_phi));
      current_statement__ = 92;
      J_p = std::numeric_limits<int>::min();
      
      current_statement__ = 92;
      J_p = max(to_array_1d(group_p));
      current_statement__ = 93;
      validate_non_negative_index("random_phi", "T - 1", (T - 1));
      current_statement__ = 94;
      random_phi = Eigen::Matrix<double, -1, 1>((T - 1));
      stan::math::fill(random_phi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 95;
      validate_non_negative_index("random_p", "T", T);
      current_statement__ = 96;
      random_p = Eigen::Matrix<double, -1, 1>(T);
      stan::math::fill(random_p, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 97;
      validate_non_negative_index("first", "M", M);
      current_statement__ = 98;
      first = std::vector<int>(M, std::numeric_limits<int>::min());
      
      current_statement__ = 99;
      validate_non_negative_index("last", "M", M);
      current_statement__ = 100;
      last = std::vector<int>(M, std::numeric_limits<int>::min());
      
      current_statement__ = 101;
      validate_non_negative_index("last_minus_first", "M", M);
      current_statement__ = 102;
      last_minus_first = std::vector<int>(M, std::numeric_limits<int>::min());
      
      current_statement__ = 104;
      for (int t = 1; t <= (T - 1); ++t) {
        current_statement__ = 103;
        assign(random_phi, cons_list(index_uni(t), nil_index_list()),
          logical_lt(
            min(
              rvalue(group_phi,
                cons_list(index_omni(),
                  cons_list(index_uni(t), nil_index_list())), "group_phi")),
            max(
              rvalue(group_phi,
                cons_list(index_omni(),
                  cons_list(index_uni(t), nil_index_list())), "group_phi"))),
          "assigning variable random_phi");}
      current_statement__ = 106;
      for (int t = 1; t <= T; ++t) {
        current_statement__ = 105;
        assign(random_p, cons_list(index_uni(t), nil_index_list()),
          logical_lt(
            min(
              rvalue(group_p,
                cons_list(index_omni(),
                  cons_list(index_uni(t), nil_index_list())), "group_p")),
            max(
              rvalue(group_p,
                cons_list(index_omni(),
                  cons_list(index_uni(t), nil_index_list())), "group_p"))),
          "assigning variable random_p");}
      current_statement__ = 111;
      for (int m = 1; m <= M; ++m) {
        current_statement__ = 107;
        assign(first, cons_list(index_uni(m), nil_index_list()),
          first_capture(
            rvalue(y,
              cons_list(index_uni(m),
                cons_list(index_omni(), nil_index_list())), "y"), pstream__),
          "assigning variable first");
        current_statement__ = 108;
        assign(last, cons_list(index_uni(m), nil_index_list()),
          last_capture(
            rvalue(y,
              cons_list(index_uni(m),
                cons_list(index_omni(), nil_index_list())), "y"), pstream__),
          "assigning variable last");
        current_statement__ = 109;
        assign(last_minus_first, cons_list(index_uni(m), nil_index_list()),
          (last[(m - 1)] - first[(m - 1)]),
          "assigning variable last_minus_first");}
      current_statement__ = 89;
      current_statement__ = 89;
      check_greater_or_equal(function__, "K_phi", K_phi, 1);
      current_statement__ = 90;
      current_statement__ = 90;
      check_greater_or_equal(function__, "K_p", K_p, 1);
      current_statement__ = 91;
      current_statement__ = 91;
      check_greater_or_equal(function__, "J_phi", J_phi, 1);
      current_statement__ = 92;
      current_statement__ = 92;
      check_greater_or_equal(function__, "J_p", J_p, 1);
      current_statement__ = 94;
      for (int sym1__ = 1; sym1__ <= (T - 1); ++sym1__) {
        current_statement__ = 94;
        current_statement__ = 94;
        check_greater_or_equal(function__, "random_phi[sym1__]",
                               random_phi[(sym1__ - 1)], 0);}
      current_statement__ = 94;
      for (int sym1__ = 1; sym1__ <= (T - 1); ++sym1__) {
        current_statement__ = 94;
        current_statement__ = 94;
        check_less_or_equal(function__, "random_phi[sym1__]",
                            random_phi[(sym1__ - 1)], 1);}
      current_statement__ = 96;
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 96;
        current_statement__ = 96;
        check_greater_or_equal(function__, "random_p[sym1__]",
                               random_p[(sym1__ - 1)], 0);}
      current_statement__ = 96;
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 96;
        current_statement__ = 96;
        check_less_or_equal(function__, "random_p[sym1__]",
                            random_p[(sym1__ - 1)], 1);}
      current_statement__ = 98;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 98;
        current_statement__ = 98;
        check_greater_or_equal(function__, "first[sym1__]",
                               first[(sym1__ - 1)], 0);}
      current_statement__ = 98;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 98;
        current_statement__ = 98;
        check_less_or_equal(function__, "first[sym1__]", first[(sym1__ - 1)],
                            T);}
      current_statement__ = 100;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 100;
        current_statement__ = 100;
        check_greater_or_equal(function__, "last[sym1__]",
                               last[(sym1__ - 1)], 0);}
      current_statement__ = 100;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 100;
        current_statement__ = 100;
        check_less_or_equal(function__, "last[sym1__]", last[(sym1__ - 1)], T);
      }
      current_statement__ = 102;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 102;
        current_statement__ = 102;
        check_greater_or_equal(function__, "last_minus_first[sym1__]",
                               last_minus_first[(sym1__ - 1)], 0);}
      current_statement__ = 102;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 102;
        current_statement__ = 102;
        check_less_or_equal(function__, "last_minus_first[sym1__]",
                            last_minus_first[(sym1__ - 1)], (T - 1));}
      current_statement__ = 112;
      validate_non_negative_index("beta_vec", "K_phi", K_phi);
      current_statement__ = 113;
      sigma_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 113;
      sigma_1dim__ = (T - 1);
      current_statement__ = 113;
      validate_non_negative_index("sigma", "T - 1", sigma_1dim__);
      current_statement__ = 114;
      validate_non_negative_index("zeta", "J_phi", J_phi);
      current_statement__ = 115;
      zeta_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 115;
      zeta_2dim__ = (T - 1);
      current_statement__ = 115;
      validate_non_negative_index("zeta", "T - 1", zeta_2dim__);
      current_statement__ = 116;
      validate_non_negative_index("b_vec", "K_p", K_p);
      current_statement__ = 117;
      validate_non_negative_index("s", "T", T);
      current_statement__ = 118;
      validate_non_negative_index("z", "J_p", J_p);
      current_statement__ = 119;
      validate_non_negative_index("z", "T", T);
      current_statement__ = 120;
      validate_non_negative_index("beta", "K", K);
      current_statement__ = 121;
      beta_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 121;
      beta_2dim__ = (T - 1);
      current_statement__ = 121;
      validate_non_negative_index("beta", "T - 1", beta_2dim__);
      current_statement__ = 122;
      validate_non_negative_index("b", "K", K);
      current_statement__ = 123;
      validate_non_negative_index("b", "T", T);
      current_statement__ = 124;
      validate_non_negative_index("phi", "M", M);
      current_statement__ = 125;
      phi_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 125;
      phi_2dim__ = (T - 1);
      current_statement__ = 125;
      validate_non_negative_index("phi", "T - 1", phi_2dim__);
      current_statement__ = 126;
      validate_non_negative_index("p", "M", M);
      current_statement__ = 127;
      validate_non_negative_index("p", "T", T);
      current_statement__ = 128;
      validate_non_negative_index("chi", "M", M);
      current_statement__ = 129;
      validate_non_negative_index("LL", "M", M);
      current_statement__ = 130;
      validate_non_negative_index("epsilon", "J_phi", J_phi);
      current_statement__ = 131;
      epsilon_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 131;
      epsilon_2dim__ = (T - 1);
      current_statement__ = 131;
      validate_non_negative_index("epsilon", "T - 1", epsilon_2dim__);
      current_statement__ = 132;
      validate_non_negative_index("e", "J_p", J_p);
      current_statement__ = 133;
      validate_non_negative_index("e", "T", T);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += K_phi;
      num_params_r__ += sigma_1dim__;
      num_params_r__ += J_phi * zeta_2dim__;
      num_params_r__ += K_p;
      num_params_r__ += T;
      num_params_r__ += J_p * T;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_CJS_phiXRE_pXRE_fixNA_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_vec;
      beta_vec = Eigen::Matrix<local_scalar_t__, -1, 1>(K_phi);
      stan::math::fill(beta_vec, DUMMY_VAR__);
      
      current_statement__ = 1;
      beta_vec = in__.vector(K_phi);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma;
      sigma = Eigen::Matrix<local_scalar_t__, -1, 1>(sigma_1dim__);
      stan::math::fill(sigma, DUMMY_VAR__);
      
      current_statement__ = 2;
      sigma = in__.vector(sigma_1dim__);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 0, lp__),
            "assigning variable sigma");
        } else {
          current_statement__ = 2;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 0),
            "assigning variable sigma");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> zeta;
      zeta = Eigen::Matrix<local_scalar_t__, -1, -1>(J_phi, zeta_2dim__);
      stan::math::fill(zeta, DUMMY_VAR__);
      
      current_statement__ = 3;
      zeta = in__.matrix(J_phi, zeta_2dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> b_vec;
      b_vec = Eigen::Matrix<local_scalar_t__, -1, 1>(K_p);
      stan::math::fill(b_vec, DUMMY_VAR__);
      
      current_statement__ = 4;
      b_vec = in__.vector(K_p);
      Eigen::Matrix<local_scalar_t__, -1, 1> s;
      s = Eigen::Matrix<local_scalar_t__, -1, 1>(T);
      stan::math::fill(s, DUMMY_VAR__);
      
      current_statement__ = 5;
      s = in__.vector(T);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(s, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(s[(sym1__ - 1)], 0, lp__),
            "assigning variable s");
        } else {
          current_statement__ = 5;
          assign(s, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(s[(sym1__ - 1)], 0),
            "assigning variable s");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> z;
      z = Eigen::Matrix<local_scalar_t__, -1, -1>(J_p, T);
      stan::math::fill(z, DUMMY_VAR__);
      
      current_statement__ = 6;
      z = in__.matrix(J_p, T);
      Eigen::Matrix<local_scalar_t__, -1, -1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, -1>(K, beta_2dim__);
      stan::math::fill(beta, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> b;
      b = Eigen::Matrix<local_scalar_t__, -1, -1>(K, T);
      stan::math::fill(b, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, -1>(M, phi_2dim__);
      stan::math::fill(phi, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> p;
      p = Eigen::Matrix<local_scalar_t__, -1, -1>(M, T);
      stan::math::fill(p, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> chi;
      chi = Eigen::Matrix<local_scalar_t__, -1, 1>(M);
      stan::math::fill(chi, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> LL;
      LL = Eigen::Matrix<local_scalar_t__, -1, 1>(M);
      stan::math::fill(LL, DUMMY_VAR__);
      
      current_statement__ = 13;
      assign(beta, nil_index_list(), rep_matrix(0, K, (T - 1)),
        "assigning variable beta");
      current_statement__ = 14;
      assign(b, nil_index_list(), rep_matrix(0, K, T), "assigning variable b");
      {
        int np_phi;
        np_phi = std::numeric_limits<int>::min();
        
        current_statement__ = 15;
        np_phi = 1;
        int np_p;
        np_p = std::numeric_limits<int>::min();
        
        current_statement__ = 16;
        np_p = 1;
        current_statement__ = 28;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 21;
          for (int t = 1; t <= (T - 1); ++t) {
            current_statement__ = 20;
            if (indX_phi[(k - 1)][(t - 1)]) {
              current_statement__ = 17;
              assign(beta,
                cons_list(index_uni(k),
                  cons_list(index_uni(t), nil_index_list())),
                beta_vec[(np_phi - 1)], "assigning variable beta");
              current_statement__ = 18;
              np_phi = (np_phi + 1);
            } }
          current_statement__ = 26;
          for (int t = 1; t <= T; ++t) {
            current_statement__ = 25;
            if (indX_p[(k - 1)][(t - 1)]) {
              current_statement__ = 22;
              assign(b,
                cons_list(index_uni(k),
                  cons_list(index_uni(t), nil_index_list())),
                b_vec[(np_p - 1)], "assigning variable b");
              current_statement__ = 23;
              np_p = (np_p + 1);
            } }}
      }
      current_statement__ = 31;
      for (int t = 1; t <= (T - 1); ++t) {
        current_statement__ = 30;
        assign(phi,
          cons_list(index_omni(), cons_list(index_uni(t), nil_index_list())),
          elt_multiply(
            inv_logit(
              add(
                multiply(X,
                  rvalue(beta,
                    cons_list(index_omni(),
                      cons_list(index_uni(t), nil_index_list())), "beta")),
                multiply((random_phi[(t - 1)] * sigma[(t - 1)]),
                  rvalue(zeta,
                    cons_list(
                      index_multi(rvalue(group_phi,
                                    cons_list(index_omni(),
                                      cons_list(index_uni(t),
                                        nil_index_list())), "group_phi")),
                      cons_list(index_uni(t), nil_index_list())), "zeta")))),
            subtract(1, fix_phi0[(t - 1)])), "assigning variable phi");}
      current_statement__ = 33;
      for (int t = 1; t <= T; ++t) {
        current_statement__ = 32;
        assign(p,
          cons_list(index_omni(), cons_list(index_uni(t), nil_index_list())),
          add(
            elt_multiply(
              inv_logit(
                add(
                  multiply(X,
                    rvalue(b,
                      cons_list(index_omni(),
                        cons_list(index_uni(t), nil_index_list())), "b")),
                  multiply((random_p[(t - 1)] * s[(t - 1)]),
                    rvalue(z,
                      cons_list(
                        index_multi(rvalue(group_p,
                                      cons_list(index_omni(),
                                        cons_list(index_uni(t),
                                          nil_index_list())), "group_p")),
                        cons_list(index_uni(t), nil_index_list())), "z")))),
              subtract(1, fix_p1[(t - 1)])), fix_p1[(t - 1)]),
          "assigning variable p");}
      current_statement__ = 34;
      assign(LL, nil_index_list(), rep_vector(0, M), "assigning variable LL");
      current_statement__ = 44;
      for (int m = 1; m <= M; ++m) {
        current_statement__ = 40;
        if (logical_gt(last_minus_first[(m - 1)], 0)) {
          current_statement__ = 38;
          for (int t = (first[(m - 1)] + 1); t <= last[(m - 1)]; ++t) {
            current_statement__ = 35;
            assign(LL, cons_list(index_uni(m), nil_index_list()),
              (LL[(m - 1)] +
                (n[(m - 1)] *
                  stan::math::log(
                    rvalue(phi,
                      cons_list(index_uni(m),
                        cons_list(index_uni((t - 1)), nil_index_list())),
                      "phi")))), "assigning variable LL");
            current_statement__ = 36;
            assign(LL, cons_list(index_uni(m), nil_index_list()),
              (LL[(m - 1)] +
                (n[(m - 1)] *
                  bernoulli_lpmf<false>(y[(m - 1)][(t - 1)],
                    rvalue(p,
                      cons_list(index_uni(m),
                        cons_list(index_uni(t), nil_index_list())), "p")))),
              "assigning variable LL");}
        } 
        current_statement__ = 41;
        assign(chi, cons_list(index_uni(m), nil_index_list()),
          prob_uncaptured(last[(m - 1)],
            rvalue(p,
              cons_list(index_uni(m),
                cons_list(index_omni(), nil_index_list())), "p"),
            rvalue(phi,
              cons_list(index_uni(m),
                cons_list(index_omni(), nil_index_list())), "phi"), pstream__),
          "assigning variable chi");
        current_statement__ = 42;
        assign(LL, cons_list(index_uni(m), nil_index_list()),
          (LL[(m - 1)] + (n[(m - 1)] * stan::math::log(chi[(m - 1)]))),
          "assigning variable LL");}
      {
        current_statement__ = 49;
        lp_accum__.add(
          logistic_lpdf<propto__>(
            rvalue(beta_vec,
              cons_list(index_min_max(1, (T - 1)), nil_index_list()),
              "beta_vec"), 0, 1));
        current_statement__ = 51;
        if (logical_gt(K_phi, (T - 1))) {
          current_statement__ = 50;
          lp_accum__.add(
            normal_lpdf<propto__>(
              rvalue(beta_vec,
                cons_list(index_min_max(T, K_phi), nil_index_list()),
                "beta_vec"), 0, 3));
        } 
        current_statement__ = 52;
        lp_accum__.add(normal_lpdf<propto__>(sigma, 0, 3));
        current_statement__ = 53;
        lp_accum__.add(normal_lpdf<propto__>(to_vector(zeta), 0, 1));
        current_statement__ = 54;
        lp_accum__.add(
          logistic_lpdf<propto__>(
            rvalue(b_vec,
              cons_list(index_min_max(1, (T - 1)), nil_index_list()),
              "b_vec"), 0, 1));
        current_statement__ = 56;
        if (logical_gt(K_p, T)) {
          current_statement__ = 55;
          lp_accum__.add(
            normal_lpdf<propto__>(
              rvalue(b_vec,
                cons_list(index_min_max((T + 1), K_p), nil_index_list()),
                "b_vec"), 0, 3));
        } 
        current_statement__ = 57;
        lp_accum__.add(normal_lpdf<propto__>(s, 0, 3));
        current_statement__ = 58;
        lp_accum__.add(normal_lpdf<propto__>(to_vector(z), 0, 1));
        current_statement__ = 59;
        lp_accum__.add(sum(LL));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_CJS_phiXRE_pXRE_fixNA_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> beta_vec;
      beta_vec = Eigen::Matrix<double, -1, 1>(K_phi);
      stan::math::fill(beta_vec, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      beta_vec = in__.vector(K_phi);
      Eigen::Matrix<double, -1, 1> sigma;
      sigma = Eigen::Matrix<double, -1, 1>(sigma_1dim__);
      stan::math::fill(sigma, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      sigma = in__.vector(sigma_1dim__);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma");}
      Eigen::Matrix<double, -1, -1> zeta;
      zeta = Eigen::Matrix<double, -1, -1>(J_phi, zeta_2dim__);
      stan::math::fill(zeta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      zeta = in__.matrix(J_phi, zeta_2dim__);
      Eigen::Matrix<double, -1, 1> b_vec;
      b_vec = Eigen::Matrix<double, -1, 1>(K_p);
      stan::math::fill(b_vec, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      b_vec = in__.vector(K_p);
      Eigen::Matrix<double, -1, 1> s;
      s = Eigen::Matrix<double, -1, 1>(T);
      stan::math::fill(s, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      s = in__.vector(T);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 5;
        assign(s, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(s[(sym1__ - 1)], 0),
          "assigning variable s");}
      Eigen::Matrix<double, -1, -1> z;
      z = Eigen::Matrix<double, -1, -1>(J_p, T);
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      z = in__.matrix(J_p, T);
      Eigen::Matrix<double, -1, -1> beta;
      beta = Eigen::Matrix<double, -1, -1>(K, beta_2dim__);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> b;
      b = Eigen::Matrix<double, -1, -1>(K, T);
      stan::math::fill(b, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> phi;
      phi = Eigen::Matrix<double, -1, -1>(M, phi_2dim__);
      stan::math::fill(phi, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> p;
      p = Eigen::Matrix<double, -1, -1>(M, T);
      stan::math::fill(p, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> chi;
      chi = Eigen::Matrix<double, -1, 1>(M);
      stan::math::fill(chi, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> LL;
      LL = Eigen::Matrix<double, -1, 1>(M);
      stan::math::fill(LL, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= K_phi; ++sym1__) {
        vars__.emplace_back(beta_vec[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        vars__.emplace_back(sigma[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= zeta_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= J_phi; ++sym2__) {
          vars__.emplace_back(
            rvalue(zeta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "zeta"));}}
      for (int sym1__ = 1; sym1__ <= K_p; ++sym1__) {
        vars__.emplace_back(b_vec[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        vars__.emplace_back(s[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= J_p; ++sym2__) {
          vars__.emplace_back(
            rvalue(z,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "z"));}}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 13;
      assign(beta, nil_index_list(), rep_matrix(0, K, (T - 1)),
        "assigning variable beta");
      current_statement__ = 14;
      assign(b, nil_index_list(), rep_matrix(0, K, T), "assigning variable b");
      {
        int np_phi;
        np_phi = std::numeric_limits<int>::min();
        
        current_statement__ = 15;
        np_phi = 1;
        int np_p;
        np_p = std::numeric_limits<int>::min();
        
        current_statement__ = 16;
        np_p = 1;
        current_statement__ = 28;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 21;
          for (int t = 1; t <= (T - 1); ++t) {
            current_statement__ = 20;
            if (indX_phi[(k - 1)][(t - 1)]) {
              current_statement__ = 17;
              assign(beta,
                cons_list(index_uni(k),
                  cons_list(index_uni(t), nil_index_list())),
                beta_vec[(np_phi - 1)], "assigning variable beta");
              current_statement__ = 18;
              np_phi = (np_phi + 1);
            } }
          current_statement__ = 26;
          for (int t = 1; t <= T; ++t) {
            current_statement__ = 25;
            if (indX_p[(k - 1)][(t - 1)]) {
              current_statement__ = 22;
              assign(b,
                cons_list(index_uni(k),
                  cons_list(index_uni(t), nil_index_list())),
                b_vec[(np_p - 1)], "assigning variable b");
              current_statement__ = 23;
              np_p = (np_p + 1);
            } }}
      }
      current_statement__ = 31;
      for (int t = 1; t <= (T - 1); ++t) {
        current_statement__ = 30;
        assign(phi,
          cons_list(index_omni(), cons_list(index_uni(t), nil_index_list())),
          elt_multiply(
            inv_logit(
              add(
                multiply(X,
                  rvalue(beta,
                    cons_list(index_omni(),
                      cons_list(index_uni(t), nil_index_list())), "beta")),
                multiply((random_phi[(t - 1)] * sigma[(t - 1)]),
                  rvalue(zeta,
                    cons_list(
                      index_multi(rvalue(group_phi,
                                    cons_list(index_omni(),
                                      cons_list(index_uni(t),
                                        nil_index_list())), "group_phi")),
                      cons_list(index_uni(t), nil_index_list())), "zeta")))),
            subtract(1, fix_phi0[(t - 1)])), "assigning variable phi");}
      current_statement__ = 33;
      for (int t = 1; t <= T; ++t) {
        current_statement__ = 32;
        assign(p,
          cons_list(index_omni(), cons_list(index_uni(t), nil_index_list())),
          add(
            elt_multiply(
              inv_logit(
                add(
                  multiply(X,
                    rvalue(b,
                      cons_list(index_omni(),
                        cons_list(index_uni(t), nil_index_list())), "b")),
                  multiply((random_p[(t - 1)] * s[(t - 1)]),
                    rvalue(z,
                      cons_list(
                        index_multi(rvalue(group_p,
                                      cons_list(index_omni(),
                                        cons_list(index_uni(t),
                                          nil_index_list())), "group_p")),
                        cons_list(index_uni(t), nil_index_list())), "z")))),
              subtract(1, fix_p1[(t - 1)])), fix_p1[(t - 1)]),
          "assigning variable p");}
      current_statement__ = 34;
      assign(LL, nil_index_list(), rep_vector(0, M), "assigning variable LL");
      current_statement__ = 44;
      for (int m = 1; m <= M; ++m) {
        current_statement__ = 40;
        if (logical_gt(last_minus_first[(m - 1)], 0)) {
          current_statement__ = 38;
          for (int t = (first[(m - 1)] + 1); t <= last[(m - 1)]; ++t) {
            current_statement__ = 35;
            assign(LL, cons_list(index_uni(m), nil_index_list()),
              (LL[(m - 1)] +
                (n[(m - 1)] *
                  stan::math::log(
                    rvalue(phi,
                      cons_list(index_uni(m),
                        cons_list(index_uni((t - 1)), nil_index_list())),
                      "phi")))), "assigning variable LL");
            current_statement__ = 36;
            assign(LL, cons_list(index_uni(m), nil_index_list()),
              (LL[(m - 1)] +
                (n[(m - 1)] *
                  bernoulli_lpmf<false>(y[(m - 1)][(t - 1)],
                    rvalue(p,
                      cons_list(index_uni(m),
                        cons_list(index_uni(t), nil_index_list())), "p")))),
              "assigning variable LL");}
        } 
        current_statement__ = 41;
        assign(chi, cons_list(index_uni(m), nil_index_list()),
          prob_uncaptured(last[(m - 1)],
            rvalue(p,
              cons_list(index_uni(m),
                cons_list(index_omni(), nil_index_list())), "p"),
            rvalue(phi,
              cons_list(index_uni(m),
                cons_list(index_omni(), nil_index_list())), "phi"), pstream__),
          "assigning variable chi");
        current_statement__ = 42;
        assign(LL, cons_list(index_uni(m), nil_index_list()),
          (LL[(m - 1)] + (n[(m - 1)] * stan::math::log(chi[(m - 1)]))),
          "assigning variable LL");}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= beta_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            vars__.emplace_back(
              rvalue(beta,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "beta"));}
        }
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            vars__.emplace_back(
              rvalue(b,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "b"));}}
        for (int sym1__ = 1; sym1__ <= phi_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            vars__.emplace_back(
              rvalue(phi,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "phi"));}}
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            vars__.emplace_back(
              rvalue(p,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "p"));}}
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          vars__.emplace_back(chi[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          vars__.emplace_back(LL[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, -1> epsilon;
      epsilon = Eigen::Matrix<double, -1, -1>(J_phi, epsilon_2dim__);
      stan::math::fill(epsilon, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> e;
      e = Eigen::Matrix<double, -1, -1>(J_p, T);
      stan::math::fill(e, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 47;
      assign(epsilon, nil_index_list(), diag_post_multiply(zeta, sigma),
        "assigning variable epsilon");
      current_statement__ = 48;
      assign(e, nil_index_list(), diag_post_multiply(z, s),
        "assigning variable e");
      for (int sym1__ = 1; sym1__ <= epsilon_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= J_phi; ++sym2__) {
          vars__.emplace_back(
            rvalue(epsilon,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "epsilon"));
        }}
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= J_p; ++sym2__) {
          vars__.emplace_back(
            rvalue(e,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "e"));}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> beta_vec;
      beta_vec = Eigen::Matrix<double, -1, 1>(K_phi);
      stan::math::fill(beta_vec, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_vec_flat__;
        current_statement__ = 1;
        assign(beta_vec_flat__, nil_index_list(),
          context__.vals_r("beta_vec"), "assigning variable beta_vec_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K_phi; ++sym1__) {
          current_statement__ = 1;
          assign(beta_vec, cons_list(index_uni(sym1__), nil_index_list()),
            beta_vec_flat__[(pos__ - 1)], "assigning variable beta_vec");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sigma;
      sigma = Eigen::Matrix<double, -1, 1>(sigma_1dim__);
      stan::math::fill(sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma_flat__;
        current_statement__ = 2;
        assign(sigma_flat__, nil_index_list(), context__.vals_r("sigma"),
          "assigning variable sigma_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
          current_statement__ = 2;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            sigma_flat__[(pos__ - 1)], "assigning variable sigma");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sigma_free__;
      sigma_free__ = Eigen::Matrix<double, -1, 1>(sigma_1dim__);
      stan::math::fill(sigma_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(sigma_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma_free__");}
      Eigen::Matrix<double, -1, -1> zeta;
      zeta = Eigen::Matrix<double, -1, -1>(J_phi, zeta_2dim__);
      stan::math::fill(zeta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> zeta_flat__;
        current_statement__ = 3;
        assign(zeta_flat__, nil_index_list(), context__.vals_r("zeta"),
          "assigning variable zeta_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= zeta_2dim__; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= J_phi; ++sym2__) {
            current_statement__ = 3;
            assign(zeta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              zeta_flat__[(pos__ - 1)], "assigning variable zeta");
            current_statement__ = 3;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> b_vec;
      b_vec = Eigen::Matrix<double, -1, 1>(K_p);
      stan::math::fill(b_vec, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> b_vec_flat__;
        current_statement__ = 4;
        assign(b_vec_flat__, nil_index_list(), context__.vals_r("b_vec"),
          "assigning variable b_vec_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= K_p; ++sym1__) {
          current_statement__ = 4;
          assign(b_vec, cons_list(index_uni(sym1__), nil_index_list()),
            b_vec_flat__[(pos__ - 1)], "assigning variable b_vec");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> s;
      s = Eigen::Matrix<double, -1, 1>(T);
      stan::math::fill(s, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> s_flat__;
        current_statement__ = 5;
        assign(s_flat__, nil_index_list(), context__.vals_r("s"),
          "assigning variable s_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 5;
          assign(s, cons_list(index_uni(sym1__), nil_index_list()),
            s_flat__[(pos__ - 1)], "assigning variable s");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> s_free__;
      s_free__ = Eigen::Matrix<double, -1, 1>(T);
      stan::math::fill(s_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 5;
        assign(s_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(s[(sym1__ - 1)], 0),
          "assigning variable s_free__");}
      Eigen::Matrix<double, -1, -1> z;
      z = Eigen::Matrix<double, -1, -1>(J_p, T);
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_flat__;
        current_statement__ = 6;
        assign(z_flat__, nil_index_list(), context__.vals_r("z"),
          "assigning variable z_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= J_p; ++sym2__) {
            current_statement__ = 6;
            assign(z,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              z_flat__[(pos__ - 1)], "assigning variable z");
            current_statement__ = 6;
            pos__ = (pos__ + 1);}}
      }
      for (int sym1__ = 1; sym1__ <= K_phi; ++sym1__) {
        vars__.emplace_back(beta_vec[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        vars__.emplace_back(sigma_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= zeta_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= J_phi; ++sym2__) {
          vars__.emplace_back(
            rvalue(zeta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "zeta"));}}
      for (int sym1__ = 1; sym1__ <= K_p; ++sym1__) {
        vars__.emplace_back(b_vec[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        vars__.emplace_back(s_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= J_p; ++sym2__) {
          vars__.emplace_back(
            rvalue(z,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "z"));}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("beta_vec");
    names__.emplace_back("sigma");
    names__.emplace_back("zeta");
    names__.emplace_back("b_vec");
    names__.emplace_back("s");
    names__.emplace_back("z");
    names__.emplace_back("beta");
    names__.emplace_back("b");
    names__.emplace_back("phi");
    names__.emplace_back("p");
    names__.emplace_back("chi");
    names__.emplace_back("LL");
    names__.emplace_back("epsilon");
    names__.emplace_back("e");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K_phi)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(sigma_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J_phi),
                                             static_cast<size_t>(zeta_2dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K_p)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(T)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J_p),
                                             static_cast<size_t>(T)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K),
                                             static_cast<size_t>(beta_2dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K),
                                             static_cast<size_t>(T)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M),
                                             static_cast<size_t>(phi_2dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M),
                                             static_cast<size_t>(T)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J_phi),
                                             static_cast<size_t>(epsilon_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(J_p),
                                             static_cast<size_t>(T)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= K_phi; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_vec" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= zeta_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= J_phi; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "zeta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= K_p; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_vec" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "s" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= J_p; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= beta_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= phi_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chi" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "LL" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= epsilon_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= J_phi; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "epsilon" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= J_p; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "e" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= K_phi; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_vec" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= zeta_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= J_phi; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "zeta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= K_p; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_vec" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "s" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= J_p; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= beta_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= phi_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chi" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "LL" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= epsilon_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= J_phi; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "epsilon" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= J_p; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "e" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta_vec\",\"type\":{\"name\":\"vector\",\"length\":" << K_phi << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" << sigma_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"zeta\",\"type\":{\"name\":\"matrix\",\"rows\":" << J_phi << ",\"cols\":" << zeta_2dim__ << "},\"block\":\"parameters\"},{\"name\":\"b_vec\",\"type\":{\"name\":\"vector\",\"length\":" << K_p << "},\"block\":\"parameters\"},{\"name\":\"s\",\"type\":{\"name\":\"vector\",\"length\":" << T << "},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"matrix\",\"rows\":" << J_p << ",\"cols\":" << T << "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" << K << ",\"cols\":" << beta_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"matrix\",\"rows\":" << K << ",\"cols\":" << T << "},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"matrix\",\"rows\":" << M << ",\"cols\":" << phi_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"matrix\",\"rows\":" << M << ",\"cols\":" << T << "},\"block\":\"transformed_parameters\"},{\"name\":\"chi\",\"type\":{\"name\":\"vector\",\"length\":" << M << "},\"block\":\"transformed_parameters\"},{\"name\":\"LL\",\"type\":{\"name\":\"vector\",\"length\":" << M << "},\"block\":\"transformed_parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"matrix\",\"rows\":" << J_phi << ",\"cols\":" << epsilon_2dim__ << "},\"block\":\"generated_quantities\"},{\"name\":\"e\",\"type\":{\"name\":\"matrix\",\"rows\":" << J_p << ",\"cols\":" << T << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta_vec\",\"type\":{\"name\":\"vector\",\"length\":" << K_phi << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" << sigma_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"zeta\",\"type\":{\"name\":\"matrix\",\"rows\":" << J_phi << ",\"cols\":" << zeta_2dim__ << "},\"block\":\"parameters\"},{\"name\":\"b_vec\",\"type\":{\"name\":\"vector\",\"length\":" << K_p << "},\"block\":\"parameters\"},{\"name\":\"s\",\"type\":{\"name\":\"vector\",\"length\":" << T << "},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"matrix\",\"rows\":" << J_p << ",\"cols\":" << T << "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" << K << ",\"cols\":" << beta_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"matrix\",\"rows\":" << K << ",\"cols\":" << T << "},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"matrix\",\"rows\":" << M << ",\"cols\":" << phi_2dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"matrix\",\"rows\":" << M << ",\"cols\":" << T << "},\"block\":\"transformed_parameters\"},{\"name\":\"chi\",\"type\":{\"name\":\"vector\",\"length\":" << M << "},\"block\":\"transformed_parameters\"},{\"name\":\"LL\",\"type\":{\"name\":\"vector\",\"length\":" << M << "},\"block\":\"transformed_parameters\"},{\"name\":\"epsilon\",\"type\":{\"name\":\"matrix\",\"rows\":" << J_phi << ",\"cols\":" << epsilon_2dim__ << "},\"block\":\"generated_quantities\"},{\"name\":\"e\",\"type\":{\"name\":\"matrix\",\"rows\":" << J_p << ",\"cols\":" << T << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_CJS_phiXRE_pXRE_fixNA_namespace::model_CJS_phiXRE_pXRE_fixNA;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_CJS_phiXRE_pXRE_fixNA_namespace::profiles__;
}
#endif
#endif
