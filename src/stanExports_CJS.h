// Generated by rstantools.  Do not edit by hand.

/*
    CJStan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    CJStan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with CJStan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
#ifndef USE_STANC3
#define USE_STANC3
#endif
// Code generated by stanc v2.26.1
#include <stan/model/model_header.hpp>
namespace model_CJS_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 55, column 2 to column 35)",
                                                      " (in 'string', line 56, column 2 to column 31)",
                                                      " (in 'string', line 59, column 2 to column 33)",
                                                      " (in 'string', line 60, column 2 to column 35)",
                                                      " (in 'string', line 83, column 2 to column 14)",
                                                      " (in 'string', line 84, column 2 to column 15)",
                                                      " (in 'string', line 86, column 2 to column 27)",
                                                      " (in 'string', line 89, column 2 to column 23)",
                                                      " (in 'string', line 96, column 8 to column 38)",
                                                      " (in 'string', line 97, column 8 to column 54)",
                                                      " (in 'string', line 95, column 6 to line 98, column 7)",
                                                      " (in 'string', line 94, column 6 to line 98, column 7)",
                                                      " (in 'string', line 93, column 4 to line 99, column 5)",
                                                      " (in 'string', line 92, column 4 to line 99, column 5)",
                                                      " (in 'string', line 100, column 4 to column 38)",
                                                      " (in 'string', line 91, column 2 to line 101, column 3)",
                                                      " (in 'string', line 90, column 2 to line 101, column 3)",
                                                      " (in 'string', line 75, column 8 to column 39)",
                                                      " (in 'string', line 76, column 8 to column 55)",
                                                      " (in 'string', line 74, column 6 to line 77, column 7)",
                                                      " (in 'string', line 73, column 6 to line 77, column 7)",
                                                      " (in 'string', line 72, column 4 to line 78, column 5)",
                                                      " (in 'string', line 71, column 4 to line 78, column 5)",
                                                      " (in 'string', line 79, column 4 to column 39)",
                                                      " (in 'string', line 70, column 2 to line 80, column 3)",
                                                      " (in 'string', line 69, column 2 to line 80, column 3)",
                                                      " (in 'string', line 37, column 2 to column 17)",
                                                      " (in 'string', line 38, column 2 to column 17)",
                                                      " (in 'string', line 39, column 25 to column 26)",
                                                      " (in 'string', line 39, column 27 to column 28)",
                                                      " (in 'string', line 39, column 2 to column 30)",
                                                      " (in 'string', line 40, column 17 to column 18)",
                                                      " (in 'string', line 40, column 2 to column 20)",
                                                      " (in 'string', line 43, column 29 to column 30)",
                                                      " (in 'string', line 43, column 2 to column 32)",
                                                      " (in 'string', line 44, column 28 to column 29)",
                                                      " (in 'string', line 44, column 2 to column 31)",
                                                      " (in 'string', line 45, column 42 to column 43)",
                                                      " (in 'string', line 45, column 2 to column 45)",
                                                      " (in 'string', line 49, column 4 to column 36)",
                                                      " (in 'string', line 50, column 4 to column 34)",
                                                      " (in 'string', line 51, column 4 to column 45)",
                                                      " (in 'string', line 48, column 2 to line 52, column 3)",
                                                      " (in 'string', line 47, column 2 to line 52, column 3)",
                                                      " (in 'string', line 55, column 26 to column 29)",
                                                      " (in 'string', line 56, column 26 to column 27)",
                                                      " (in 'string', line 59, column 26 to column 27)",
                                                      " (in 'string', line 84, column 9 to column 10)",
                                                      " (in 'string', line 6, column 8 to column 17)",
                                                      " (in 'string', line 5, column 6 to line 6, column 17)",
                                                      " (in 'string', line 4, column 4 to line 6, column 17)",
                                                      " (in 'string', line 7, column 4 to column 13)",
                                                      " (in 'string', line 3, column 31 to line 8, column 3)",
                                                      " (in 'string', line 13, column 6 to column 12)",
                                                      " (in 'string', line 14, column 6 to column 28)",
                                                      " (in 'string', line 16, column 8 to column 17)",
                                                      " (in 'string', line 15, column 6 to line 16, column 17)",
                                                      " (in 'string', line 12, column 4 to line 17, column 5)",
                                                      " (in 'string', line 11, column 4 to line 17, column 5)",
                                                      " (in 'string', line 18, column 4 to column 13)",
                                                      " (in 'string', line 10, column 30 to line 19, column 3)",
                                                      " (in 'string', line 22, column 11 to column 12)",
                                                      " (in 'string', line 22, column 4 to column 18)",
                                                      " (in 'string', line 24, column 4 to column 17)",
                                                      " (in 'string', line 27, column 6 to column 17)",
                                                      " (in 'string', line 28, column 6 to column 17)",
                                                      " (in 'string', line 29, column 6 to column 21)",
                                                      " (in 'string', line 30, column 6 to column 26)",
                                                      " (in 'string', line 31, column 6 to column 84)",
                                                      " (in 'string', line 26, column 4 to line 32, column 5)",
                                                      " (in 'string', line 25, column 4 to line 32, column 5)",
                                                      " (in 'string', line 33, column 4 to column 15)",
                                                      " (in 'string', line 21, column 54 to line 34, column 3)"};
int
first_capture(const std::vector<int>& y_i, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 51;
    for (int t = 1; t <= size(y_i); ++t) {
      current_statement__ = 50;
      if (y_i[(t - 1)]) {
        current_statement__ = 49;
        return t;
      } }
    current_statement__ = 52;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct first_capture_functor__ {
int
operator()(const std::vector<int>& y_i, std::ostream* pstream__)  const 
{
return first_capture(y_i, pstream__);
}
};
int
last_capture(const std::vector<int>& y_i, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 59;
    for (int t_rev = 0; t_rev <= (size(y_i) - 1); ++t_rev) {
      int t;
      t = std::numeric_limits<int>::min();
      
      current_statement__ = 55;
      t = (size(y_i) - t_rev);
      current_statement__ = 57;
      if (y_i[(t - 1)]) {
        current_statement__ = 56;
        return t;
      } }
    current_statement__ = 60;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct last_capture_functor__ {
int
operator()(const std::vector<int>& y_i, std::ostream* pstream__)  const 
{
return last_capture(y_i, pstream__);
}
};
template <typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T1__>,
stan::value_type_t<T2__>>, -1, 1>
prob_uncaptured(const int& T, const T1__& p_arg__, const T2__& phi_arg__,
                std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T1__>,
          stan::value_type_t<T2__>>;
  const auto& p = to_ref(p_arg__);
  const auto& phi = to_ref(phi_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 62;
    validate_non_negative_index("chi", "T", T);
    Eigen::Matrix<local_scalar_t__, -1, 1> chi;
    chi = Eigen::Matrix<local_scalar_t__, -1, 1>(T);
    stan::math::fill(chi, DUMMY_VAR__);
    
    current_statement__ = 64;
    assign(chi, cons_list(index_uni(T), nil_index_list()), 1.0,
      "assigning variable chi");
    current_statement__ = 71;
    for (int t = 1; t <= (T - 1); ++t) {
      int t_curr;
      t_curr = std::numeric_limits<int>::min();
      
      int t_next;
      t_next = std::numeric_limits<int>::min();
      
      current_statement__ = 67;
      t_curr = (T - t);
      current_statement__ = 68;
      t_next = (t_curr + 1);
      current_statement__ = 69;
      assign(chi, cons_list(index_uni(t_curr), nil_index_list()),
        ((1 - phi[(t_curr - 1)]) +
          ((phi[(t_curr - 1)] * (1 - p[(t_next - 1)])) * chi[(t_next - 1)])),
        "assigning variable chi");}
    current_statement__ = 72;
    return chi;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct prob_uncaptured_functor__ {
template <typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T1__>,
stan::value_type_t<T2__>>, -1, 1>
operator()(const int& T, const T1__& p, const T2__& phi,
           std::ostream* pstream__)  const 
{
return prob_uncaptured(T, p, phi, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_CJS final : public model_base_crtp<model_CJS> {
 private:
  int T;
  int M;
  std::vector<std::vector<int>> y;
  std::vector<int> n;
  std::vector<int> first;
  std::vector<int> last;
  std::vector<int> last_minus_first;
  int phi_1dim__;
 
 public:
  ~model_CJS() { }
  
  inline std::string model_name() const final { return "model_CJS"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1", "stancflags = "};
  }
  
  
  model_CJS(stan::io::var_context& context__, unsigned int random_seed__ = 0,
            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_CJS_namespace::model_CJS";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 27;
      context__.validate_dims("data initialization","T","int",
          context__.to_vec());
      T = std::numeric_limits<int>::min();
      
      current_statement__ = 27;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 27;
      current_statement__ = 27;
      check_greater_or_equal(function__, "T", T, 2);
      current_statement__ = 28;
      context__.validate_dims("data initialization","M","int",
          context__.to_vec());
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 28;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 28;
      current_statement__ = 28;
      check_greater_or_equal(function__, "M", M, 0);
      current_statement__ = 29;
      validate_non_negative_index("y", "M", M);
      current_statement__ = 30;
      validate_non_negative_index("y", "T", T);
      current_statement__ = 31;
      context__.validate_dims("data initialization","y","int",
          context__.to_vec(M, T));
      y = std::vector<std::vector<int>>(M, std::vector<int>(T, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> y_flat__;
        current_statement__ = 31;
        assign(y_flat__, nil_index_list(), context__.vals_i("y"),
          "assigning variable y_flat__");
        current_statement__ = 31;
        pos__ = 1;
        current_statement__ = 31;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 31;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 31;
            assign(y,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              y_flat__[(pos__ - 1)], "assigning variable y");
            current_statement__ = 31;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 31;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 31;
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          current_statement__ = 31;
          current_statement__ = 31;
          check_greater_or_equal(function__, "y[sym1__, sym2__]",
                                 y[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 31;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 31;
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          current_statement__ = 31;
          current_statement__ = 31;
          check_less_or_equal(function__, "y[sym1__, sym2__]",
                              y[(sym1__ - 1)][(sym2__ - 1)], 1);}}
      current_statement__ = 32;
      validate_non_negative_index("n", "M", M);
      current_statement__ = 33;
      context__.validate_dims("data initialization","n","int",
          context__.to_vec(M));
      n = std::vector<int>(M, std::numeric_limits<int>::min());
      
      current_statement__ = 33;
      assign(n, nil_index_list(), context__.vals_i("n"),
        "assigning variable n");
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 33;
        current_statement__ = 33;
        check_greater_or_equal(function__, "n[sym1__]", n[(sym1__ - 1)], 1);}
      current_statement__ = 34;
      validate_non_negative_index("first", "M", M);
      current_statement__ = 35;
      first = std::vector<int>(M, std::numeric_limits<int>::min());
      
      current_statement__ = 36;
      validate_non_negative_index("last", "M", M);
      current_statement__ = 37;
      last = std::vector<int>(M, std::numeric_limits<int>::min());
      
      current_statement__ = 38;
      validate_non_negative_index("last_minus_first", "M", M);
      current_statement__ = 39;
      last_minus_first = std::vector<int>(M, std::numeric_limits<int>::min());
      
      current_statement__ = 44;
      for (int m = 1; m <= M; ++m) {
        current_statement__ = 40;
        assign(first, cons_list(index_uni(m), nil_index_list()),
          first_capture(
            rvalue(y,
              cons_list(index_uni(m),
                cons_list(index_omni(), nil_index_list())), "y"), pstream__),
          "assigning variable first");
        current_statement__ = 41;
        assign(last, cons_list(index_uni(m), nil_index_list()),
          last_capture(
            rvalue(y,
              cons_list(index_uni(m),
                cons_list(index_omni(), nil_index_list())), "y"), pstream__),
          "assigning variable last");
        current_statement__ = 42;
        assign(last_minus_first, cons_list(index_uni(m), nil_index_list()),
          (last[(m - 1)] - first[(m - 1)]),
          "assigning variable last_minus_first");}
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 35;
        current_statement__ = 35;
        check_greater_or_equal(function__, "first[sym1__]",
                               first[(sym1__ - 1)], 0);}
      current_statement__ = 35;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 35;
        current_statement__ = 35;
        check_less_or_equal(function__, "first[sym1__]", first[(sym1__ - 1)],
                            T);}
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 37;
        current_statement__ = 37;
        check_greater_or_equal(function__, "last[sym1__]",
                               last[(sym1__ - 1)], 0);}
      current_statement__ = 37;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 37;
        current_statement__ = 37;
        check_less_or_equal(function__, "last[sym1__]", last[(sym1__ - 1)], T);
      }
      current_statement__ = 39;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 39;
        current_statement__ = 39;
        check_greater_or_equal(function__, "last_minus_first[sym1__]",
                               last_minus_first[(sym1__ - 1)], 0);}
      current_statement__ = 39;
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        current_statement__ = 39;
        current_statement__ = 39;
        check_less_or_equal(function__, "last_minus_first[sym1__]",
                            last_minus_first[(sym1__ - 1)], (T - 1));}
      current_statement__ = 45;
      phi_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 45;
      phi_1dim__ = (T - 1);
      current_statement__ = 45;
      validate_non_negative_index("phi", "T - 1", phi_1dim__);
      current_statement__ = 46;
      validate_non_negative_index("p", "T", T);
      current_statement__ = 47;
      validate_non_negative_index("chi", "T", T);
      current_statement__ = 48;
      validate_non_negative_index("LL", "M", M);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += phi_1dim__;
      num_params_r__ += T;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_CJS_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, 1>(phi_1dim__);
      stan::math::fill(phi, DUMMY_VAR__);
      
      current_statement__ = 1;
      phi = in__.vector(phi_1dim__);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(phi, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(phi[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable phi");
        } else {
          current_statement__ = 1;
          assign(phi, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(phi[(sym1__ - 1)], 0, 1),
            "assigning variable phi");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> p;
      p = Eigen::Matrix<local_scalar_t__, -1, 1>(T);
      stan::math::fill(p, DUMMY_VAR__);
      
      current_statement__ = 2;
      p = in__.vector(T);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(p, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(p[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable p");
        } else {
          current_statement__ = 2;
          assign(p, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(p[(sym1__ - 1)], 0, 1),
            "assigning variable p");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> chi;
      chi = Eigen::Matrix<local_scalar_t__, -1, 1>(T);
      stan::math::fill(chi, DUMMY_VAR__);
      
      current_statement__ = 4;
      assign(chi, nil_index_list(), prob_uncaptured(T, p, phi, pstream__),
        "assigning variable chi");
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 3;
        current_statement__ = 3;
        check_greater_or_equal(function__, "chi[sym1__]", chi[(sym1__ - 1)],
                               0);}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 3;
        current_statement__ = 3;
        check_less_or_equal(function__, "chi[sym1__]", chi[(sym1__ - 1)], 1);
      }
      {
        current_statement__ = 26;
        for (int m = 1; m <= M; ++m) {
          current_statement__ = 23;
          if (logical_gt(last_minus_first[(m - 1)], 0)) {
            current_statement__ = 21;
            for (int t = (first[(m - 1)] + 1); t <= last[(m - 1)]; ++t) {
              current_statement__ = 18;
              lp_accum__.add(
                (n[(m - 1)] * stan::math::log(phi[((t - 1) - 1)])));
              current_statement__ = 19;
              lp_accum__.add(
                (n[(m - 1)] *
                  bernoulli_lpmf<false>(y[(m - 1)][(t - 1)], p[(t - 1)])));}
          } 
          current_statement__ = 24;
          lp_accum__.add(
            (n[(m - 1)] * stan::math::log(chi[(last[(m - 1)] - 1)])));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_CJS_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> phi;
      phi = Eigen::Matrix<double, -1, 1>(phi_1dim__);
      stan::math::fill(phi, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      phi = in__.vector(phi_1dim__);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(phi, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(phi[(sym1__ - 1)], 0, 1),
          "assigning variable phi");}
      Eigen::Matrix<double, -1, 1> p;
      p = Eigen::Matrix<double, -1, 1>(T);
      stan::math::fill(p, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      p = in__.vector(T);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 2;
        assign(p, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(p[(sym1__ - 1)], 0, 1),
          "assigning variable p");}
      Eigen::Matrix<double, -1, 1> chi;
      chi = Eigen::Matrix<double, -1, 1>(T);
      stan::math::fill(chi, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        vars__.emplace_back(phi[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        vars__.emplace_back(p[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 4;
      assign(chi, nil_index_list(), prob_uncaptured(T, p, phi, pstream__),
        "assigning variable chi");
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 3;
        current_statement__ = 3;
        check_greater_or_equal(function__, "chi[sym1__]", chi[(sym1__ - 1)],
                               0);}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 3;
        current_statement__ = 3;
        check_less_or_equal(function__, "chi[sym1__]", chi[(sym1__ - 1)], 1);
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          vars__.emplace_back(chi[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double lambda;
      lambda = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> LL;
      LL = Eigen::Matrix<double, -1, 1>(M);
      stan::math::fill(LL, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      lambda = (phi[((T - 1) - 1)] * p[(T - 1)]);
      current_statement__ = 8;
      assign(LL, nil_index_list(), rep_vector(0, M), "assigning variable LL");
      current_statement__ = 17;
      for (int m = 1; m <= M; ++m) {
        current_statement__ = 14;
        if (logical_gt(last_minus_first[(m - 1)], 0)) {
          current_statement__ = 12;
          for (int t = (first[(m - 1)] + 1); t <= last[(m - 1)]; ++t) {
            current_statement__ = 9;
            assign(LL, cons_list(index_uni(m), nil_index_list()),
              (LL[(m - 1)] +
                (n[(m - 1)] * stan::math::log(phi[((t - 1) - 1)]))),
              "assigning variable LL");
            current_statement__ = 10;
            assign(LL, cons_list(index_uni(m), nil_index_list()),
              (LL[(m - 1)] +
                (n[(m - 1)] *
                  bernoulli_lpmf<false>(y[(m - 1)][(t - 1)], p[(t - 1)]))),
              "assigning variable LL");}
        } 
        current_statement__ = 15;
        assign(LL, cons_list(index_uni(m), nil_index_list()),
          (LL[(m - 1)] +
            (n[(m - 1)] * stan::math::log(chi[(last[(m - 1)] - 1)]))),
          "assigning variable LL");}
      vars__.emplace_back(lambda);
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        vars__.emplace_back(LL[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> phi;
      phi = Eigen::Matrix<double, -1, 1>(phi_1dim__);
      stan::math::fill(phi, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> phi_flat__;
        current_statement__ = 1;
        assign(phi_flat__, nil_index_list(), context__.vals_r("phi"),
          "assigning variable phi_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
          current_statement__ = 1;
          assign(phi, cons_list(index_uni(sym1__), nil_index_list()),
            phi_flat__[(pos__ - 1)], "assigning variable phi");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> phi_free__;
      phi_free__ = Eigen::Matrix<double, -1, 1>(phi_1dim__);
      stan::math::fill(phi_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(phi_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(phi[(sym1__ - 1)], 0, 1),
          "assigning variable phi_free__");}
      Eigen::Matrix<double, -1, 1> p;
      p = Eigen::Matrix<double, -1, 1>(T);
      stan::math::fill(p, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> p_flat__;
        current_statement__ = 2;
        assign(p_flat__, nil_index_list(), context__.vals_r("p"),
          "assigning variable p_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
          current_statement__ = 2;
          assign(p, cons_list(index_uni(sym1__), nil_index_list()),
            p_flat__[(pos__ - 1)], "assigning variable p");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> p_free__;
      p_free__ = Eigen::Matrix<double, -1, 1>(T);
      stan::math::fill(p_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        current_statement__ = 2;
        assign(p_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(p[(sym1__ - 1)], 0, 1),
          "assigning variable p_free__");}
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        vars__.emplace_back(phi_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        vars__.emplace_back(p_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("phi");
    names__.emplace_back("p");
    names__.emplace_back("chi");
    names__.emplace_back("lambda");
    names__.emplace_back("LL");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(phi_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(T)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(T)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chi" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "lambda");
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "LL" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "chi" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "lambda");
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "LL" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" << phi_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" << T << "},\"block\":\"parameters\"},{\"name\":\"chi\",\"type\":{\"name\":\"vector\",\"length\":" << T << "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"LL\",\"type\":{\"name\":\"vector\",\"length\":" << M << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" << phi_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" << T << "},\"block\":\"parameters\"},{\"name\":\"chi\",\"type\":{\"name\":\"vector\",\"length\":" << T << "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"LL\",\"type\":{\"name\":\"vector\",\"length\":" << M << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_CJS_namespace::model_CJS;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_CJS_namespace::profiles__;
}
#endif
#endif
