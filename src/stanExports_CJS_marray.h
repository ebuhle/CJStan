// Generated by rstantools.  Do not edit by hand.

/*
    CJStan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    CJStan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with CJStan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.1

#include <stan/model/model_header.hpp>

namespace model_CJS_marray_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_CJS_marray");
    reader.add_event(112, 110, "end", "model_CJS_marray");
    return reader;
}

int
first_capture(const std::vector<int>& y_i, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 5;
        for (int t = 1; t <= size(y_i); ++t) {
            current_statement_begin__ = 6;
            if (as_bool(get_base1(y_i,t,"y_i",1))) {
                current_statement_begin__ = 7;
                return stan::math::promote_scalar<fun_return_scalar_t__>(t);
            }
        }
        current_statement_begin__ = 8;
        return stan::math::promote_scalar<fun_return_scalar_t__>(0);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct first_capture_functor__ {
            int
    operator()(const std::vector<int>& y_i, std::ostream* pstream__) const {
        return first_capture(y_i, pstream__);
    }
};

int
last_capture(const std::vector<int>& y_i, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 12;
        for (int t_rev = 0; t_rev <= (size(y_i) - 1); ++t_rev) {
            {
            current_statement_begin__ = 14;
            int t(0);
            (void) t;  // dummy to suppress unused var warning

            stan::math::fill(t, std::numeric_limits<int>::min());


            current_statement_begin__ = 15;
            stan::math::assign(t, (size(y_i) - t_rev));
            current_statement_begin__ = 16;
            if (as_bool(get_base1(y_i,t,"y_i",1))) {
                current_statement_begin__ = 17;
                return stan::math::promote_scalar<fun_return_scalar_t__>(t);
            }
            }
        }
        current_statement_begin__ = 19;
        return stan::math::promote_scalar<fun_return_scalar_t__>(0);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct last_capture_functor__ {
            int
    operator()(const std::vector<int>& y_i, std::ostream* pstream__) const {
        return last_capture(y_i, pstream__);
    }
};

template <typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__>::type, Eigen::Dynamic,1>
prob_uncaptured(const int& T,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& p,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,1>& phi, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 23;
        validate_non_negative_index("chi", "T", T);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  chi(static_cast<Eigen::VectorXd::Index>(T));
        (void) chi;  // dummy to suppress unused var warning

        stan::math::initialize(chi, DUMMY_VAR__);
        stan::math::fill(chi,DUMMY_VAR__);


        current_statement_begin__ = 25;
        stan::model::assign(chi, 
                    stan::model::cons_list(stan::model::index_uni(T), stan::model::nil_index_list()), 
                    1.0, 
                    "assigning variable chi");
        current_statement_begin__ = 26;
        for (int t = 1; t <= (T - 1); ++t) {
            {
            current_statement_begin__ = 28;
            int t_curr(0);
            (void) t_curr;  // dummy to suppress unused var warning

            stan::math::fill(t_curr, std::numeric_limits<int>::min());
            current_statement_begin__ = 29;
            int t_next(0);
            (void) t_next;  // dummy to suppress unused var warning

            stan::math::fill(t_next, std::numeric_limits<int>::min());


            current_statement_begin__ = 30;
            stan::math::assign(t_curr, (T - t));
            current_statement_begin__ = 31;
            stan::math::assign(t_next, (t_curr + 1));
            current_statement_begin__ = 32;
            stan::model::assign(chi, 
                        stan::model::cons_list(stan::model::index_uni(t_curr), stan::model::nil_index_list()), 
                        stan::model::deep_copy(((1 - get_base1(phi,t_curr,"phi",1)) + ((get_base1(phi,t_curr,"phi",1) * (1 - get_base1(p,t_next,"p",1))) * get_base1(chi,t_next,"chi",1)))), 
                        "assigning variable chi");
            }
        }
        current_statement_begin__ = 34;
        return stan::math::promote_scalar<fun_return_scalar_t__>(chi);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct prob_uncaptured_functor__ {
    template <typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T1__, T2__>::type, Eigen::Dynamic,1>
    operator()(const int& T,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& p,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,1>& phi, std::ostream* pstream__) const {
        return prob_uncaptured(T, p, phi, pstream__);
    }
};

#include <stan_meta_header.hpp>
 class model_CJS_marray : public prob_grad {
private:
    int T;
    int M;
    vector<vector<int> > y;
    vector<int> n;
    vector<int> first;
    vector<int> last;
    vector<int> last_minus_first;
public:
    model_CJS_marray(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_CJS_marray(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_CJS_marray_namespace::model_CJS_marray";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 39;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            current_statement_begin__ = 40;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            current_statement_begin__ = 41;
            validate_non_negative_index("y", "M", M);
            validate_non_negative_index("y", "T", T);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(M,T));
            validate_non_negative_index("y", "M", M);
            validate_non_negative_index("y", "T", T);
            y = std::vector<std::vector<int> >(M,std::vector<int>(T,int(0)));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_limit_1__ = T;
            for (size_t i_1__ = 0; i_1__ < y_limit_1__; ++i_1__) {
                size_t y_limit_0__ = M;
                for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
                    y[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 42;
            validate_non_negative_index("n", "M", M);
            context__.validate_dims("data initialization", "n", "int", context__.to_vec(M));
            validate_non_negative_index("n", "M", M);
            n = std::vector<int>(M,int(0));
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            size_t n_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < n_limit_0__; ++i_0__) {
                n[i_0__] = vals_i__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 39;
            check_greater_or_equal(function__,"T",T,2);
            current_statement_begin__ = 40;
            check_greater_or_equal(function__,"M",M,0);
            current_statement_begin__ = 41;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                for (int k1__ = 0; k1__ < T; ++k1__) {
                    check_greater_or_equal(function__,"y[k0__][k1__]",y[k0__][k1__],0);
                    check_less_or_equal(function__,"y[k0__][k1__]",y[k0__][k1__],1);
                }
            }
            current_statement_begin__ = 42;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"n[k0__]",n[k0__],1);
            }
            // initialize data variables
            current_statement_begin__ = 46;
            validate_non_negative_index("first", "M", M);
            first = std::vector<int>(M,int(0));
            stan::math::fill(first, std::numeric_limits<int>::min());
            current_statement_begin__ = 47;
            validate_non_negative_index("last", "M", M);
            last = std::vector<int>(M,int(0));
            stan::math::fill(last, std::numeric_limits<int>::min());
            current_statement_begin__ = 48;
            validate_non_negative_index("last_minus_first", "M", M);
            last_minus_first = std::vector<int>(M,int(0));
            stan::math::fill(last_minus_first, std::numeric_limits<int>::min());

            current_statement_begin__ = 50;
            for (int m = 1; m <= M; ++m) {

                current_statement_begin__ = 52;
                stan::model::assign(first, 
                            stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                            first_capture(stan::model::rvalue(y, stan::model::cons_list(stan::model::index_uni(m), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "y"), pstream__), 
                            "assigning variable first");
                current_statement_begin__ = 53;
                stan::model::assign(last, 
                            stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                            last_capture(stan::model::rvalue(y, stan::model::cons_list(stan::model::index_uni(m), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "y"), pstream__), 
                            "assigning variable last");
                current_statement_begin__ = 54;
                stan::model::assign(last_minus_first, 
                            stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                            (get_base1(last,m,"last",1) - get_base1(first,m,"first",1)), 
                            "assigning variable last_minus_first");
            }

            // validate transformed data
            current_statement_begin__ = 46;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"first[k0__]",first[k0__],0);
                check_less_or_equal(function__,"first[k0__]",first[k0__],T);
            }
            current_statement_begin__ = 47;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"last[k0__]",last[k0__],0);
                check_less_or_equal(function__,"last[k0__]",last[k0__],T);
            }
            current_statement_begin__ = 48;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"last_minus_first[k0__]",last_minus_first[k0__],0);
                check_less_or_equal(function__,"last_minus_first[k0__]",last_minus_first[k0__],(T - 1));
            }

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 59;
            validate_non_negative_index("phi", "(T - 1)", (T - 1));
            num_params_r__ += (T - 1);
            current_statement_begin__ = 60;
            validate_non_negative_index("p", "T", T);
            num_params_r__ += T;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_CJS_marray() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("phi")))
            throw std::runtime_error("variable phi missing");
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "(T - 1)", (T - 1));
        context__.validate_dims("initialization", "phi", "vector_d", context__.to_vec((T - 1)));
        vector_d phi(static_cast<Eigen::VectorXd::Index>((T - 1)));
        for (int j1__ = 0U; j1__ < (T - 1); ++j1__)
            phi(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0,1,phi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable phi: ") + e.what());
        }

        if (!(context__.contains_r("p")))
            throw std::runtime_error("variable p missing");
        vals_r__ = context__.vals_r("p");
        pos__ = 0U;
        validate_non_negative_index("p", "T", T);
        context__.validate_dims("initialization", "p", "vector_d", context__.to_vec(T));
        vector_d p(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            p(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0,1,p);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable p: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.vector_lub_constrain(0,1,(T - 1),lp__);
            else
                phi = in__.vector_lub_constrain(0,1,(T - 1));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  p;
            (void) p;  // dummy to suppress unused var warning
            if (jacobian__)
                p = in__.vector_lub_constrain(0,1,T,lp__);
            else
                p = in__.vector_lub_constrain(0,1,T);


            // transformed parameters
            current_statement_begin__ = 64;
            validate_non_negative_index("chi", "T", T);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  chi(static_cast<Eigen::VectorXd::Index>(T));
            (void) chi;  // dummy to suppress unused var warning

            stan::math::initialize(chi, DUMMY_VAR__);
            stan::math::fill(chi,DUMMY_VAR__);


            current_statement_begin__ = 66;
            stan::math::assign(chi, prob_uncaptured(T,p,phi, pstream__));

            // validate transformed parameters
            for (int i0__ = 0; i0__ < T; ++i0__) {
                if (stan::math::is_uninitialized(chi(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: chi" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 64;
            check_greater_or_equal(function__,"chi",chi,0);
            check_less_or_equal(function__,"chi",chi,1);

            // model body

            current_statement_begin__ = 76;
            for (int m = 1; m <= M; ++m) {

                current_statement_begin__ = 78;
                if (as_bool(logical_gt(get_base1(last_minus_first,m,"last_minus_first",1),0))) {

                    current_statement_begin__ = 80;
                    for (int t = (get_base1(first,m,"first",1) + 1); t <= get_base1(last,m,"last",1); ++t) {

                        current_statement_begin__ = 82;
                        lp_accum__.add((get_base1(n,m,"n",1) * stan::math::log(get_base1(phi,(t - 1),"phi",1))));
                        current_statement_begin__ = 83;
                        lp_accum__.add((get_base1(n,m,"n",1) * bernoulli_log(get_base1(get_base1(y,m,"y",1),t,"y",2),get_base1(p,t,"p",1))));
                    }
                }
                current_statement_begin__ = 86;
                lp_accum__.add((get_base1(n,m,"n",1) * stan::math::log(get_base1(chi,get_base1(last,m,"last",1),"chi",1))));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("phi");
        names__.push_back("p");
        names__.push_back("chi");
        names__.push_back("lambda");
        names__.push_back("LL");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((T - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_CJS_marray_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d phi = in__.vector_lub_constrain(0,1,(T - 1));
        vector_d p = in__.vector_lub_constrain(0,1,T);
            for (int k_0__ = 0; k_0__ < (T - 1); ++k_0__) {
            vars__.push_back(phi[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(p[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 64;
            validate_non_negative_index("chi", "T", T);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  chi(static_cast<Eigen::VectorXd::Index>(T));
            (void) chi;  // dummy to suppress unused var warning

            stan::math::initialize(chi, DUMMY_VAR__);
            stan::math::fill(chi,DUMMY_VAR__);


            current_statement_begin__ = 66;
            stan::math::assign(chi, prob_uncaptured(T,p,phi, pstream__));

            // validate transformed parameters
            current_statement_begin__ = 64;
            check_greater_or_equal(function__,"chi",chi,0);
            check_less_or_equal(function__,"chi",chi,1);

            // write transformed parameters
            if (include_tparams__) {
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(chi[k_0__]);
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 91;
            local_scalar_t__ lambda;
            (void) lambda;  // dummy to suppress unused var warning

            stan::math::initialize(lambda, DUMMY_VAR__);
            stan::math::fill(lambda,DUMMY_VAR__);
            current_statement_begin__ = 92;
            validate_non_negative_index("LL", "M", M);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  LL(static_cast<Eigen::VectorXd::Index>(M));
            (void) LL;  // dummy to suppress unused var warning

            stan::math::initialize(LL, DUMMY_VAR__);
            stan::math::fill(LL,DUMMY_VAR__);


            current_statement_begin__ = 94;
            stan::math::assign(lambda, (get_base1(phi,(T - 1),"phi",1) * get_base1(p,T,"p",1)));
            current_statement_begin__ = 97;
            stan::math::assign(LL, rep_vector(0,M));
            current_statement_begin__ = 98;
            for (int m = 1; m <= M; ++m) {

                current_statement_begin__ = 100;
                if (as_bool(logical_gt(get_base1(last_minus_first,m,"last_minus_first",1),0))) {

                    current_statement_begin__ = 102;
                    for (int t = (get_base1(first,m,"first",1) + 1); t <= get_base1(last,m,"last",1); ++t) {

                        current_statement_begin__ = 104;
                        stan::model::assign(LL, 
                                    stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(LL, stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), "LL") + (get_base1(n,m,"n",1) * stan::math::log(get_base1(phi,(t - 1),"phi",1)))), 
                                    "assigning variable LL");
                        current_statement_begin__ = 105;
                        stan::model::assign(LL, 
                                    stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(LL, stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), "LL") + (get_base1(n,m,"n",1) * bernoulli_log(get_base1(get_base1(y,m,"y",1),t,"y",2),get_base1(p,t,"p",1)))), 
                                    "assigning variable LL");
                    }
                }
                current_statement_begin__ = 108;
                stan::model::assign(LL, 
                            stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                            (stan::model::rvalue(LL, stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), "LL") + (get_base1(n,m,"n",1) * stan::math::log(get_base1(chi,get_base1(last,m,"last",1),"chi",1)))), 
                            "assigning variable LL");
            }

            // validate generated quantities
            current_statement_begin__ = 91;
            current_statement_begin__ = 92;

            // write generated quantities
        vars__.push_back(lambda);
            for (int k_0__ = 0; k_0__ < M; ++k_0__) {
            vars__.push_back(LL[k_0__]);
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_CJS_marray";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= (T - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "chi" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= (T - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "chi" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "LL" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}

typedef model_CJS_marray_namespace::model_CJS_marray stan_model;


#endif
