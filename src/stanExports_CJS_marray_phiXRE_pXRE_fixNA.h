// Generated by rstantools.  Do not edit by hand.

/*
    CJStan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    CJStan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with CJStan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.1

#include <stan/model/model_header.hpp>

namespace model_CJS_marray_phiXRE_pXRE_fixNA_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_CJS_marray_phiXRE_pXRE_fixNA");
    reader.add_event(195, 193, "end", "model_CJS_marray_phiXRE_pXRE_fixNA");
    return reader;
}

int
first_capture(const std::vector<int>& y_i, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 8;
        for (int t = 1; t <= size(y_i); ++t) {
            current_statement_begin__ = 9;
            if (as_bool(get_base1(y_i,t,"y_i",1))) {
                current_statement_begin__ = 10;
                return stan::math::promote_scalar<fun_return_scalar_t__>(t);
            }
        }
        current_statement_begin__ = 11;
        return stan::math::promote_scalar<fun_return_scalar_t__>(0);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct first_capture_functor__ {
            int
    operator()(const std::vector<int>& y_i, std::ostream* pstream__) const {
        return first_capture(y_i, pstream__);
    }
};

int
last_capture(const std::vector<int>& y_i, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 15;
        for (int t_rev = 0; t_rev <= (size(y_i) - 1); ++t_rev) {
            {
            current_statement_begin__ = 17;
            int t(0);
            (void) t;  // dummy to suppress unused var warning

            stan::math::fill(t, std::numeric_limits<int>::min());
            stan::math::assign(t,(size(y_i) - t_rev));


            current_statement_begin__ = 18;
            if (as_bool(get_base1(y_i,t,"y_i",1))) {
                current_statement_begin__ = 19;
                return stan::math::promote_scalar<fun_return_scalar_t__>(t);
            }
            }
        }
        current_statement_begin__ = 21;
        return stan::math::promote_scalar<fun_return_scalar_t__>(0);
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct last_capture_functor__ {
            int
    operator()(const std::vector<int>& y_i, std::ostream* pstream__) const {
        return last_capture(y_i, pstream__);
    }
};

template <typename T1__, typename T2__>
typename boost::math::tools::promote_args<T1__, T2__>::type
prob_uncaptured(const int& last_capture,
                    const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& p,
                    const Eigen::Matrix<T2__, 1,Eigen::Dynamic>& phi, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 25;
        int T(0);
        (void) T;  // dummy to suppress unused var warning

        stan::math::fill(T, std::numeric_limits<int>::min());
        stan::math::assign(T,num_elements(p));
        current_statement_begin__ = 26;
        validate_non_negative_index("chi", "T", T);
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  chi(static_cast<Eigen::VectorXd::Index>(T));
        (void) chi;  // dummy to suppress unused var warning

        stan::math::initialize(chi, DUMMY_VAR__);
        stan::math::fill(chi,DUMMY_VAR__);


        current_statement_begin__ = 28;
        stan::model::assign(chi, 
                    stan::model::cons_list(stan::model::index_uni(T), stan::model::nil_index_list()), 
                    1.0, 
                    "assigning variable chi");
        current_statement_begin__ = 29;
        for (int t = 1; t <= (T - last_capture); ++t) {
            {
            current_statement_begin__ = 31;
            int t_curr(0);
            (void) t_curr;  // dummy to suppress unused var warning

            stan::math::fill(t_curr, std::numeric_limits<int>::min());
            stan::math::assign(t_curr,(T - t));
            current_statement_begin__ = 32;
            int t_next(0);
            (void) t_next;  // dummy to suppress unused var warning

            stan::math::fill(t_next, std::numeric_limits<int>::min());
            stan::math::assign(t_next,(t_curr + 1));


            current_statement_begin__ = 33;
            stan::model::assign(chi, 
                        stan::model::cons_list(stan::model::index_uni(t_curr), stan::model::nil_index_list()), 
                        stan::model::deep_copy(((1 - get_base1(phi,t_curr,"phi",1)) + ((get_base1(phi,t_curr,"phi",1) * (1 - get_base1(p,t_next,"p",1))) * get_base1(chi,t_next,"chi",1)))), 
                        "assigning variable chi");
            }
        }
        current_statement_begin__ = 35;
        return stan::math::promote_scalar<fun_return_scalar_t__>(get_base1(chi,last_capture,"chi",1));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct prob_uncaptured_functor__ {
    template <typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T1__, T2__>::type
    operator()(const int& last_capture,
                    const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& p,
                    const Eigen::Matrix<T2__, 1,Eigen::Dynamic>& phi, std::ostream* pstream__) const {
        return prob_uncaptured(last_capture, p, phi, pstream__);
    }
};

#include <stan_meta_header.hpp>
 class model_CJS_marray_phiXRE_pXRE_fixNA : public prob_grad {
private:
    int T;
    int M;
    int K;
    matrix_d X;
    vector<vector<int> > indX_phi;
    vector<vector<int> > group_phi;
    vector<vector<int> > indX_p;
    vector<vector<int> > group_p;
    vector<vector<int> > y;
    vector<int> n;
    int K_phi;
    int K_p;
    int J_phi;
    int J_p;
    vector_d random_phi;
    vector_d random_p;
    vector<int> first;
    vector<int> last;
    vector<int> last_minus_first;
public:
    model_CJS_marray_phiXRE_pXRE_fixNA(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_CJS_marray_phiXRE_pXRE_fixNA(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_CJS_marray_phiXRE_pXRE_fixNA_namespace::model_CJS_marray_phiXRE_pXRE_fixNA";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 40;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            current_statement_begin__ = 41;
            context__.validate_dims("data initialization", "M", "int", context__.to_vec());
            M = int(0);
            vals_i__ = context__.vals_i("M");
            pos__ = 0;
            M = vals_i__[pos__++];
            current_statement_begin__ = 42;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 43;
            validate_non_negative_index("X", "M", M);
            validate_non_negative_index("X", "K", K);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(M,K));
            validate_non_negative_index("X", "M", M);
            validate_non_negative_index("X", "K", K);
            X = matrix_d(static_cast<Eigen::VectorXd::Index>(M),static_cast<Eigen::VectorXd::Index>(K));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_m_mat_lim__ = M;
            size_t X_n_mat_lim__ = K;
            for (size_t n_mat__ = 0; n_mat__ < X_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < X_m_mat_lim__; ++m_mat__) {
                    X(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 44;
            validate_non_negative_index("indX_phi", "K", K);
            validate_non_negative_index("indX_phi", "(T - 1)", (T - 1));
            context__.validate_dims("data initialization", "indX_phi", "int", context__.to_vec(K,(T - 1)));
            validate_non_negative_index("indX_phi", "K", K);
            validate_non_negative_index("indX_phi", "(T - 1)", (T - 1));
            indX_phi = std::vector<std::vector<int> >(K,std::vector<int>((T - 1),int(0)));
            vals_i__ = context__.vals_i("indX_phi");
            pos__ = 0;
            size_t indX_phi_limit_1__ = (T - 1);
            for (size_t i_1__ = 0; i_1__ < indX_phi_limit_1__; ++i_1__) {
                size_t indX_phi_limit_0__ = K;
                for (size_t i_0__ = 0; i_0__ < indX_phi_limit_0__; ++i_0__) {
                    indX_phi[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 45;
            validate_non_negative_index("group_phi", "M", M);
            validate_non_negative_index("group_phi", "(T - 1)", (T - 1));
            context__.validate_dims("data initialization", "group_phi", "int", context__.to_vec(M,(T - 1)));
            validate_non_negative_index("group_phi", "M", M);
            validate_non_negative_index("group_phi", "(T - 1)", (T - 1));
            group_phi = std::vector<std::vector<int> >(M,std::vector<int>((T - 1),int(0)));
            vals_i__ = context__.vals_i("group_phi");
            pos__ = 0;
            size_t group_phi_limit_1__ = (T - 1);
            for (size_t i_1__ = 0; i_1__ < group_phi_limit_1__; ++i_1__) {
                size_t group_phi_limit_0__ = M;
                for (size_t i_0__ = 0; i_0__ < group_phi_limit_0__; ++i_0__) {
                    group_phi[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 46;
            validate_non_negative_index("indX_p", "K", K);
            validate_non_negative_index("indX_p", "T", T);
            context__.validate_dims("data initialization", "indX_p", "int", context__.to_vec(K,T));
            validate_non_negative_index("indX_p", "K", K);
            validate_non_negative_index("indX_p", "T", T);
            indX_p = std::vector<std::vector<int> >(K,std::vector<int>(T,int(0)));
            vals_i__ = context__.vals_i("indX_p");
            pos__ = 0;
            size_t indX_p_limit_1__ = T;
            for (size_t i_1__ = 0; i_1__ < indX_p_limit_1__; ++i_1__) {
                size_t indX_p_limit_0__ = K;
                for (size_t i_0__ = 0; i_0__ < indX_p_limit_0__; ++i_0__) {
                    indX_p[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 47;
            validate_non_negative_index("group_p", "M", M);
            validate_non_negative_index("group_p", "T", T);
            context__.validate_dims("data initialization", "group_p", "int", context__.to_vec(M,T));
            validate_non_negative_index("group_p", "M", M);
            validate_non_negative_index("group_p", "T", T);
            group_p = std::vector<std::vector<int> >(M,std::vector<int>(T,int(0)));
            vals_i__ = context__.vals_i("group_p");
            pos__ = 0;
            size_t group_p_limit_1__ = T;
            for (size_t i_1__ = 0; i_1__ < group_p_limit_1__; ++i_1__) {
                size_t group_p_limit_0__ = M;
                for (size_t i_0__ = 0; i_0__ < group_p_limit_0__; ++i_0__) {
                    group_p[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 48;
            validate_non_negative_index("y", "M", M);
            validate_non_negative_index("y", "T", T);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(M,T));
            validate_non_negative_index("y", "M", M);
            validate_non_negative_index("y", "T", T);
            y = std::vector<std::vector<int> >(M,std::vector<int>(T,int(0)));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_limit_1__ = T;
            for (size_t i_1__ = 0; i_1__ < y_limit_1__; ++i_1__) {
                size_t y_limit_0__ = M;
                for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
                    y[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 49;
            validate_non_negative_index("n", "M", M);
            context__.validate_dims("data initialization", "n", "int", context__.to_vec(M));
            validate_non_negative_index("n", "M", M);
            n = std::vector<int>(M,int(0));
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            size_t n_limit_0__ = M;
            for (size_t i_0__ = 0; i_0__ < n_limit_0__; ++i_0__) {
                n[i_0__] = vals_i__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 40;
            check_greater_or_equal(function__,"T",T,2);
            current_statement_begin__ = 41;
            check_greater_or_equal(function__,"M",M,0);
            current_statement_begin__ = 42;
            check_greater_or_equal(function__,"K",K,1);
            current_statement_begin__ = 43;
            current_statement_begin__ = 44;
            for (int k0__ = 0; k0__ < K; ++k0__) {
                for (int k1__ = 0; k1__ < (T - 1); ++k1__) {
                    check_greater_or_equal(function__,"indX_phi[k0__][k1__]",indX_phi[k0__][k1__],0);
                    check_less_or_equal(function__,"indX_phi[k0__][k1__]",indX_phi[k0__][k1__],1);
                }
            }
            current_statement_begin__ = 45;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                for (int k1__ = 0; k1__ < (T - 1); ++k1__) {
                    check_greater_or_equal(function__,"group_phi[k0__][k1__]",group_phi[k0__][k1__],0);
                }
            }
            current_statement_begin__ = 46;
            for (int k0__ = 0; k0__ < K; ++k0__) {
                for (int k1__ = 0; k1__ < T; ++k1__) {
                    check_greater_or_equal(function__,"indX_p[k0__][k1__]",indX_p[k0__][k1__],0);
                    check_less_or_equal(function__,"indX_p[k0__][k1__]",indX_p[k0__][k1__],1);
                }
            }
            current_statement_begin__ = 47;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                for (int k1__ = 0; k1__ < T; ++k1__) {
                    check_greater_or_equal(function__,"group_p[k0__][k1__]",group_p[k0__][k1__],0);
                }
            }
            current_statement_begin__ = 48;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                for (int k1__ = 0; k1__ < T; ++k1__) {
                    check_greater_or_equal(function__,"y[k0__][k1__]",y[k0__][k1__],0);
                    check_less_or_equal(function__,"y[k0__][k1__]",y[k0__][k1__],1);
                }
            }
            current_statement_begin__ = 49;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"n[k0__]",n[k0__],1);
            }
            // initialize data variables
            current_statement_begin__ = 53;
            K_phi = int(0);
            stan::math::fill(K_phi, std::numeric_limits<int>::min());
            current_statement_begin__ = 54;
            K_p = int(0);
            stan::math::fill(K_p, std::numeric_limits<int>::min());
            current_statement_begin__ = 55;
            J_phi = int(0);
            stan::math::fill(J_phi, std::numeric_limits<int>::min());
            current_statement_begin__ = 56;
            J_p = int(0);
            stan::math::fill(J_p, std::numeric_limits<int>::min());
            current_statement_begin__ = 57;
            validate_non_negative_index("random_phi", "(T - 1)", (T - 1));
            random_phi = vector_d(static_cast<Eigen::VectorXd::Index>((T - 1)));
            stan::math::fill(random_phi,DUMMY_VAR__);
            current_statement_begin__ = 58;
            validate_non_negative_index("random_p", "T", T);
            random_p = vector_d(static_cast<Eigen::VectorXd::Index>(T));
            stan::math::fill(random_p,DUMMY_VAR__);
            current_statement_begin__ = 59;
            validate_non_negative_index("first", "M", M);
            first = std::vector<int>(M,int(0));
            stan::math::fill(first, std::numeric_limits<int>::min());
            current_statement_begin__ = 60;
            validate_non_negative_index("last", "M", M);
            last = std::vector<int>(M,int(0));
            stan::math::fill(last, std::numeric_limits<int>::min());
            current_statement_begin__ = 61;
            validate_non_negative_index("last_minus_first", "M", M);
            last_minus_first = std::vector<int>(M,int(0));
            stan::math::fill(last_minus_first, std::numeric_limits<int>::min());

            current_statement_begin__ = 63;
            stan::math::assign(K_phi, sum(to_array_1d(indX_phi)));
            current_statement_begin__ = 64;
            stan::math::assign(K_p, sum(to_array_1d(indX_p)));
            current_statement_begin__ = 65;
            stan::math::assign(J_phi, max(to_array_1d(group_phi)));
            current_statement_begin__ = 66;
            stan::math::assign(J_p, max(to_array_1d(group_p)));
            current_statement_begin__ = 69;
            for (int t = 1; t <= (T - 1); ++t) {
                current_statement_begin__ = 70;
                stan::model::assign(random_phi, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            logical_lt(min(stan::model::rvalue(group_phi, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "group_phi")),max(stan::model::rvalue(group_phi, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "group_phi"))), 
                            "assigning variable random_phi");
            }
            current_statement_begin__ = 71;
            for (int t = 1; t <= T; ++t) {
                current_statement_begin__ = 72;
                stan::model::assign(random_p, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                            logical_lt(min(stan::model::rvalue(group_p, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "group_p")),max(stan::model::rvalue(group_p, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "group_p"))), 
                            "assigning variable random_p");
            }
            current_statement_begin__ = 74;
            for (int m = 1; m <= M; ++m) {

                current_statement_begin__ = 76;
                stan::model::assign(first, 
                            stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                            first_capture(stan::model::rvalue(y, stan::model::cons_list(stan::model::index_uni(m), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "y"), pstream__), 
                            "assigning variable first");
                current_statement_begin__ = 77;
                stan::model::assign(last, 
                            stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                            last_capture(stan::model::rvalue(y, stan::model::cons_list(stan::model::index_uni(m), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "y"), pstream__), 
                            "assigning variable last");
                current_statement_begin__ = 78;
                stan::model::assign(last_minus_first, 
                            stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                            (get_base1(last,m,"last",1) - get_base1(first,m,"first",1)), 
                            "assigning variable last_minus_first");
            }

            // validate transformed data
            current_statement_begin__ = 53;
            check_greater_or_equal(function__,"K_phi",K_phi,1);
            current_statement_begin__ = 54;
            check_greater_or_equal(function__,"K_p",K_p,1);
            current_statement_begin__ = 55;
            check_greater_or_equal(function__,"J_phi",J_phi,1);
            current_statement_begin__ = 56;
            check_greater_or_equal(function__,"J_p",J_p,1);
            current_statement_begin__ = 57;
            check_greater_or_equal(function__,"random_phi",random_phi,0);
            check_less_or_equal(function__,"random_phi",random_phi,1);
            current_statement_begin__ = 58;
            check_greater_or_equal(function__,"random_p",random_p,0);
            check_less_or_equal(function__,"random_p",random_p,1);
            current_statement_begin__ = 59;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"first[k0__]",first[k0__],0);
                check_less_or_equal(function__,"first[k0__]",first[k0__],T);
            }
            current_statement_begin__ = 60;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"last[k0__]",last[k0__],0);
                check_less_or_equal(function__,"last[k0__]",last[k0__],T);
            }
            current_statement_begin__ = 61;
            for (int k0__ = 0; k0__ < M; ++k0__) {
                check_greater_or_equal(function__,"last_minus_first[k0__]",last_minus_first[k0__],0);
                check_less_or_equal(function__,"last_minus_first[k0__]",last_minus_first[k0__],(T - 1));
            }

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 83;
            validate_non_negative_index("beta_vec", "K_phi", K_phi);
            num_params_r__ += K_phi;
            current_statement_begin__ = 84;
            validate_non_negative_index("sigma", "(T - 1)", (T - 1));
            num_params_r__ += (T - 1);
            current_statement_begin__ = 85;
        validate_non_negative_index("zeta", "J_phi", J_phi);
            validate_non_negative_index("zeta", "(T - 1)", (T - 1));
            num_params_r__ += J_phi * (T - 1);
            current_statement_begin__ = 86;
            validate_non_negative_index("b_vec", "K_p", K_p);
            num_params_r__ += K_p;
            current_statement_begin__ = 87;
            validate_non_negative_index("s", "T", T);
            num_params_r__ += T;
            current_statement_begin__ = 88;
        validate_non_negative_index("z", "J_p", J_p);
            validate_non_negative_index("z", "T", T);
            num_params_r__ += J_p * T;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_CJS_marray_phiXRE_pXRE_fixNA() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("beta_vec")))
            throw std::runtime_error("variable beta_vec missing");
        vals_r__ = context__.vals_r("beta_vec");
        pos__ = 0U;
        validate_non_negative_index("beta_vec", "K_phi", K_phi);
        context__.validate_dims("initialization", "beta_vec", "vector_d", context__.to_vec(K_phi));
        vector_d beta_vec(static_cast<Eigen::VectorXd::Index>(K_phi));
        for (int j1__ = 0U; j1__ < K_phi; ++j1__)
            beta_vec(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(beta_vec);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta_vec: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "(T - 1)", (T - 1));
        context__.validate_dims("initialization", "sigma", "vector_d", context__.to_vec((T - 1)));
        vector_d sigma(static_cast<Eigen::VectorXd::Index>((T - 1)));
        for (int j1__ = 0U; j1__ < (T - 1); ++j1__)
            sigma(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        if (!(context__.contains_r("zeta")))
            throw std::runtime_error("variable zeta missing");
        vals_r__ = context__.vals_r("zeta");
        pos__ = 0U;
        validate_non_negative_index("zeta", "J_phi", J_phi);
        validate_non_negative_index("zeta", "(T - 1)", (T - 1));
        context__.validate_dims("initialization", "zeta", "matrix_d", context__.to_vec(J_phi,(T - 1)));
        matrix_d zeta(static_cast<Eigen::VectorXd::Index>(J_phi),static_cast<Eigen::VectorXd::Index>((T - 1)));
        for (int j2__ = 0U; j2__ < (T - 1); ++j2__)
            for (int j1__ = 0U; j1__ < J_phi; ++j1__)
                zeta(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(zeta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable zeta: ") + e.what());
        }

        if (!(context__.contains_r("b_vec")))
            throw std::runtime_error("variable b_vec missing");
        vals_r__ = context__.vals_r("b_vec");
        pos__ = 0U;
        validate_non_negative_index("b_vec", "K_p", K_p);
        context__.validate_dims("initialization", "b_vec", "vector_d", context__.to_vec(K_p));
        vector_d b_vec(static_cast<Eigen::VectorXd::Index>(K_p));
        for (int j1__ = 0U; j1__ < K_p; ++j1__)
            b_vec(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(b_vec);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b_vec: ") + e.what());
        }

        if (!(context__.contains_r("s")))
            throw std::runtime_error("variable s missing");
        vals_r__ = context__.vals_r("s");
        pos__ = 0U;
        validate_non_negative_index("s", "T", T);
        context__.validate_dims("initialization", "s", "vector_d", context__.to_vec(T));
        vector_d s(static_cast<Eigen::VectorXd::Index>(T));
        for (int j1__ = 0U; j1__ < T; ++j1__)
            s(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,s);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable s: ") + e.what());
        }

        if (!(context__.contains_r("z")))
            throw std::runtime_error("variable z missing");
        vals_r__ = context__.vals_r("z");
        pos__ = 0U;
        validate_non_negative_index("z", "J_p", J_p);
        validate_non_negative_index("z", "T", T);
        context__.validate_dims("initialization", "z", "matrix_d", context__.to_vec(J_p,T));
        matrix_d z(static_cast<Eigen::VectorXd::Index>(J_p),static_cast<Eigen::VectorXd::Index>(T));
        for (int j2__ = 0U; j2__ < T; ++j2__)
            for (int j1__ = 0U; j1__ < J_p; ++j1__)
                z(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(z);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  beta_vec;
            (void) beta_vec;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_vec = in__.vector_constrain(K_phi,lp__);
            else
                beta_vec = in__.vector_constrain(K_phi);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.vector_lb_constrain(0,(T - 1),lp__);
            else
                sigma = in__.vector_lb_constrain(0,(T - 1));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  zeta;
            (void) zeta;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta = in__.matrix_constrain(J_phi,(T - 1),lp__);
            else
                zeta = in__.matrix_constrain(J_phi,(T - 1));

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  b_vec;
            (void) b_vec;  // dummy to suppress unused var warning
            if (jacobian__)
                b_vec = in__.vector_constrain(K_p,lp__);
            else
                b_vec = in__.vector_constrain(K_p);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  s;
            (void) s;  // dummy to suppress unused var warning
            if (jacobian__)
                s = in__.vector_lb_constrain(0,T,lp__);
            else
                s = in__.vector_lb_constrain(0,T);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  z;
            (void) z;  // dummy to suppress unused var warning
            if (jacobian__)
                z = in__.matrix_constrain(J_p,T,lp__);
            else
                z = in__.matrix_constrain(J_p,T);


            // transformed parameters
            current_statement_begin__ = 92;
            validate_non_negative_index("beta", "K", K);
            validate_non_negative_index("beta", "(T - 1)", (T - 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  beta(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>((T - 1)));
            (void) beta;  // dummy to suppress unused var warning

            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta,DUMMY_VAR__);
            current_statement_begin__ = 93;
            validate_non_negative_index("b", "K", K);
            validate_non_negative_index("b", "T", T);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  b(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(T));
            (void) b;  // dummy to suppress unused var warning

            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b,DUMMY_VAR__);
            current_statement_begin__ = 94;
            validate_non_negative_index("phi", "M", M);
            validate_non_negative_index("phi", "(T - 1)", (T - 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  phi(static_cast<Eigen::VectorXd::Index>(M),static_cast<Eigen::VectorXd::Index>((T - 1)));
            (void) phi;  // dummy to suppress unused var warning

            stan::math::initialize(phi, DUMMY_VAR__);
            stan::math::fill(phi,DUMMY_VAR__);
            current_statement_begin__ = 95;
            validate_non_negative_index("p", "M", M);
            validate_non_negative_index("p", "T", T);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  p(static_cast<Eigen::VectorXd::Index>(M),static_cast<Eigen::VectorXd::Index>(T));
            (void) p;  // dummy to suppress unused var warning

            stan::math::initialize(p, DUMMY_VAR__);
            stan::math::fill(p,DUMMY_VAR__);
            current_statement_begin__ = 96;
            validate_non_negative_index("chi", "M", M);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  chi(static_cast<Eigen::VectorXd::Index>(M));
            (void) chi;  // dummy to suppress unused var warning

            stan::math::initialize(chi, DUMMY_VAR__);
            stan::math::fill(chi,DUMMY_VAR__);
            current_statement_begin__ = 98;
            validate_non_negative_index("LL", "M", M);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  LL(static_cast<Eigen::VectorXd::Index>(M));
            (void) LL;  // dummy to suppress unused var warning

            stan::math::initialize(LL, DUMMY_VAR__);
            stan::math::fill(LL,DUMMY_VAR__);


            current_statement_begin__ = 101;
            stan::math::assign(beta, rep_matrix(0,K,(T - 1)));
            current_statement_begin__ = 102;
            stan::math::assign(b, rep_matrix(0,K,T));
            {
            current_statement_begin__ = 105;
            int np_phi(0);
            (void) np_phi;  // dummy to suppress unused var warning

            stan::math::fill(np_phi, std::numeric_limits<int>::min());
            current_statement_begin__ = 106;
            int np_p(0);
            (void) np_p;  // dummy to suppress unused var warning

            stan::math::fill(np_p, std::numeric_limits<int>::min());


            current_statement_begin__ = 108;
            stan::math::assign(np_phi, 1);
            current_statement_begin__ = 109;
            stan::math::assign(np_p, 1);
            current_statement_begin__ = 111;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 113;
                for (int t = 1; t <= (T - 1); ++t) {
                    current_statement_begin__ = 114;
                    if (as_bool(get_base1(get_base1(indX_phi,k,"indX_phi",1),t,"indX_phi",2))) {

                        current_statement_begin__ = 116;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                                    get_base1(beta_vec,np_phi,"beta_vec",1), 
                                    "assigning variable beta");
                        current_statement_begin__ = 117;
                        stan::math::assign(np_phi, (np_phi + 1));
                    }
                }
                current_statement_begin__ = 120;
                for (int t = 1; t <= T; ++t) {
                    current_statement_begin__ = 121;
                    if (as_bool(get_base1(get_base1(indX_p,k,"indX_p",1),t,"indX_p",2))) {

                        current_statement_begin__ = 123;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                                    get_base1(b_vec,np_p,"b_vec",1), 
                                    "assigning variable b");
                        current_statement_begin__ = 124;
                        stan::math::assign(np_p, (np_p + 1));
                    }
                }
            }
            }
            current_statement_begin__ = 130;
            for (int t = 1; t <= (T - 1); ++t) {

                current_statement_begin__ = 135;
                stan::model::assign(phi, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                            inv_logit(add(multiply(X,stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "beta")),multiply((get_base1(random_phi,t,"random_phi",1) * get_base1(sigma,t,"sigma",1)),stan::model::rvalue(zeta, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(group_phi, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "group_phi")), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "zeta")))), 
                            "assigning variable phi");
            }
            current_statement_begin__ = 138;
            for (int t = 1; t <= T; ++t) {

                current_statement_begin__ = 143;
                stan::model::assign(p, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                            inv_logit(add(multiply(X,stan::model::rvalue(b, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "b")),multiply((get_base1(random_p,t,"random_p",1) * get_base1(s,t,"s",1)),stan::model::rvalue(z, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(group_p, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "group_p")), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "z")))), 
                            "assigning variable p");
            }
            current_statement_begin__ = 147;
            stan::math::assign(LL, rep_vector(0,M));
            current_statement_begin__ = 149;
            for (int m = 1; m <= M; ++m) {

                current_statement_begin__ = 151;
                if (as_bool(logical_gt(get_base1(last_minus_first,m,"last_minus_first",1),0))) {

                    current_statement_begin__ = 153;
                    for (int t = (get_base1(first,m,"first",1) + 1); t <= get_base1(last,m,"last",1); ++t) {

                        current_statement_begin__ = 155;
                        stan::model::assign(LL, 
                                    stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(LL, stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), "LL") + (get_base1(n,m,"n",1) * stan::math::log(get_base1(phi,m,(t - 1),"phi",1)))), 
                                    "assigning variable LL");
                        current_statement_begin__ = 156;
                        stan::model::assign(LL, 
                                    stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(LL, stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), "LL") + (get_base1(n,m,"n",1) * bernoulli_log(get_base1(get_base1(y,m,"y",1),t,"y",2),get_base1(p,m,t,"p",1)))), 
                                    "assigning variable LL");
                    }
                }
                current_statement_begin__ = 159;
                stan::model::assign(chi, 
                            stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                            prob_uncaptured(get_base1(last,m,"last",1),stan::model::rvalue(p, stan::model::cons_list(stan::model::index_uni(m), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "p"),stan::model::rvalue(phi, stan::model::cons_list(stan::model::index_uni(m), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "phi"), pstream__), 
                            "assigning variable chi");
                current_statement_begin__ = 160;
                stan::model::assign(LL, 
                            stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                            (stan::model::rvalue(LL, stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), "LL") + (get_base1(n,m,"n",1) * stan::math::log(get_base1(chi,m,"chi",1)))), 
                            "assigning variable LL");
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < K; ++i0__) {
                for (int i1__ = 0; i1__ < (T - 1); ++i1__) {
                    if (stan::math::is_uninitialized(beta(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: beta" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < K; ++i0__) {
                for (int i1__ = 0; i1__ < T; ++i1__) {
                    if (stan::math::is_uninitialized(b(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: b" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < M; ++i0__) {
                for (int i1__ = 0; i1__ < (T - 1); ++i1__) {
                    if (stan::math::is_uninitialized(phi(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: phi" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < M; ++i0__) {
                for (int i1__ = 0; i1__ < T; ++i1__) {
                    if (stan::math::is_uninitialized(p(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: p" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < M; ++i0__) {
                if (stan::math::is_uninitialized(chi(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: chi" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < M; ++i0__) {
                if (stan::math::is_uninitialized(LL(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: LL" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 92;
            current_statement_begin__ = 93;
            current_statement_begin__ = 94;
            current_statement_begin__ = 95;
            current_statement_begin__ = 96;
            current_statement_begin__ = 98;

            // model body

            current_statement_begin__ = 169;
            lp_accum__.add(add(log_inv_logit(stan::model::rvalue(beta_vec, stan::model::cons_list(stan::model::index_min_max(1, (T - 1)), stan::model::nil_index_list()), "beta_vec")),log1m_inv_logit(stan::model::rvalue(beta_vec, stan::model::cons_list(stan::model::index_min_max(1, (T - 1)), stan::model::nil_index_list()), "beta_vec"))));
            current_statement_begin__ = 170;
            if (as_bool(logical_gt(K_phi,(T - 1)))) {
                current_statement_begin__ = 171;
                lp_accum__.add(normal_log<propto__>(stan::model::rvalue(beta_vec, stan::model::cons_list(stan::model::index_min_max(T, K_phi), stan::model::nil_index_list()), "beta_vec"), 0, 3));
            }
            current_statement_begin__ = 172;
            lp_accum__.add(normal_log<propto__>(sigma, 0, 3));
            current_statement_begin__ = 173;
            lp_accum__.add(normal_log<propto__>(to_vector(zeta), 0, 1));
            current_statement_begin__ = 176;
            lp_accum__.add(add(log_inv_logit(stan::model::rvalue(b_vec, stan::model::cons_list(stan::model::index_min_max(1, T), stan::model::nil_index_list()), "b_vec")),log1m_inv_logit(stan::model::rvalue(b_vec, stan::model::cons_list(stan::model::index_min_max(1, T), stan::model::nil_index_list()), "b_vec"))));
            current_statement_begin__ = 177;
            if (as_bool(logical_gt(K_p,T))) {
                current_statement_begin__ = 178;
                lp_accum__.add(normal_log<propto__>(stan::model::rvalue(b_vec, stan::model::cons_list(stan::model::index_min_max((T + 1), K_p), stan::model::nil_index_list()), "b_vec"), 0, 3));
            }
            current_statement_begin__ = 179;
            lp_accum__.add(normal_log<propto__>(s, 0, 3));
            current_statement_begin__ = 180;
            lp_accum__.add(normal_log<propto__>(to_vector(z), 0, 1));
            current_statement_begin__ = 183;
            lp_accum__.add(sum(LL));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta_vec");
        names__.push_back("sigma");
        names__.push_back("zeta");
        names__.push_back("b_vec");
        names__.push_back("s");
        names__.push_back("z");
        names__.push_back("beta");
        names__.push_back("b");
        names__.push_back("phi");
        names__.push_back("p");
        names__.push_back("chi");
        names__.push_back("LL");
        names__.push_back("epsilon");
        names__.push_back("e");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K_phi);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((T - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J_phi);
        dims__.push_back((T - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K_p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J_p);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back((T - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back((T - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J_phi);
        dims__.push_back((T - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J_p);
        dims__.push_back(T);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_CJS_marray_phiXRE_pXRE_fixNA_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d beta_vec = in__.vector_constrain(K_phi);
        vector_d sigma = in__.vector_lb_constrain(0,(T - 1));
        matrix_d zeta = in__.matrix_constrain(J_phi,(T - 1));
        vector_d b_vec = in__.vector_constrain(K_p);
        vector_d s = in__.vector_lb_constrain(0,T);
        matrix_d z = in__.matrix_constrain(J_p,T);
            for (int k_0__ = 0; k_0__ < K_phi; ++k_0__) {
            vars__.push_back(beta_vec[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (T - 1); ++k_0__) {
            vars__.push_back(sigma[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < (T - 1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < J_phi; ++k_0__) {
                vars__.push_back(zeta(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < K_p; ++k_0__) {
            vars__.push_back(b_vec[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < T; ++k_0__) {
            vars__.push_back(s[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < T; ++k_1__) {
                for (int k_0__ = 0; k_0__ < J_p; ++k_0__) {
                vars__.push_back(z(k_0__, k_1__));
                }
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 92;
            validate_non_negative_index("beta", "K", K);
            validate_non_negative_index("beta", "(T - 1)", (T - 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  beta(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>((T - 1)));
            (void) beta;  // dummy to suppress unused var warning

            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta,DUMMY_VAR__);
            current_statement_begin__ = 93;
            validate_non_negative_index("b", "K", K);
            validate_non_negative_index("b", "T", T);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  b(static_cast<Eigen::VectorXd::Index>(K),static_cast<Eigen::VectorXd::Index>(T));
            (void) b;  // dummy to suppress unused var warning

            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b,DUMMY_VAR__);
            current_statement_begin__ = 94;
            validate_non_negative_index("phi", "M", M);
            validate_non_negative_index("phi", "(T - 1)", (T - 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  phi(static_cast<Eigen::VectorXd::Index>(M),static_cast<Eigen::VectorXd::Index>((T - 1)));
            (void) phi;  // dummy to suppress unused var warning

            stan::math::initialize(phi, DUMMY_VAR__);
            stan::math::fill(phi,DUMMY_VAR__);
            current_statement_begin__ = 95;
            validate_non_negative_index("p", "M", M);
            validate_non_negative_index("p", "T", T);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  p(static_cast<Eigen::VectorXd::Index>(M),static_cast<Eigen::VectorXd::Index>(T));
            (void) p;  // dummy to suppress unused var warning

            stan::math::initialize(p, DUMMY_VAR__);
            stan::math::fill(p,DUMMY_VAR__);
            current_statement_begin__ = 96;
            validate_non_negative_index("chi", "M", M);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  chi(static_cast<Eigen::VectorXd::Index>(M));
            (void) chi;  // dummy to suppress unused var warning

            stan::math::initialize(chi, DUMMY_VAR__);
            stan::math::fill(chi,DUMMY_VAR__);
            current_statement_begin__ = 98;
            validate_non_negative_index("LL", "M", M);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  LL(static_cast<Eigen::VectorXd::Index>(M));
            (void) LL;  // dummy to suppress unused var warning

            stan::math::initialize(LL, DUMMY_VAR__);
            stan::math::fill(LL,DUMMY_VAR__);


            current_statement_begin__ = 101;
            stan::math::assign(beta, rep_matrix(0,K,(T - 1)));
            current_statement_begin__ = 102;
            stan::math::assign(b, rep_matrix(0,K,T));
            {
            current_statement_begin__ = 105;
            int np_phi(0);
            (void) np_phi;  // dummy to suppress unused var warning

            stan::math::fill(np_phi, std::numeric_limits<int>::min());
            current_statement_begin__ = 106;
            int np_p(0);
            (void) np_p;  // dummy to suppress unused var warning

            stan::math::fill(np_p, std::numeric_limits<int>::min());


            current_statement_begin__ = 108;
            stan::math::assign(np_phi, 1);
            current_statement_begin__ = 109;
            stan::math::assign(np_p, 1);
            current_statement_begin__ = 111;
            for (int k = 1; k <= K; ++k) {

                current_statement_begin__ = 113;
                for (int t = 1; t <= (T - 1); ++t) {
                    current_statement_begin__ = 114;
                    if (as_bool(get_base1(get_base1(indX_phi,k,"indX_phi",1),t,"indX_phi",2))) {

                        current_statement_begin__ = 116;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                                    get_base1(beta_vec,np_phi,"beta_vec",1), 
                                    "assigning variable beta");
                        current_statement_begin__ = 117;
                        stan::math::assign(np_phi, (np_phi + 1));
                    }
                }
                current_statement_begin__ = 120;
                for (int t = 1; t <= T; ++t) {
                    current_statement_begin__ = 121;
                    if (as_bool(get_base1(get_base1(indX_p,k,"indX_p",1),t,"indX_p",2))) {

                        current_statement_begin__ = 123;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni(k), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                                    get_base1(b_vec,np_p,"b_vec",1), 
                                    "assigning variable b");
                        current_statement_begin__ = 124;
                        stan::math::assign(np_p, (np_p + 1));
                    }
                }
            }
            }
            current_statement_begin__ = 130;
            for (int t = 1; t <= (T - 1); ++t) {

                current_statement_begin__ = 135;
                stan::model::assign(phi, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                            inv_logit(add(multiply(X,stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "beta")),multiply((get_base1(random_phi,t,"random_phi",1) * get_base1(sigma,t,"sigma",1)),stan::model::rvalue(zeta, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(group_phi, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "group_phi")), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "zeta")))), 
                            "assigning variable phi");
            }
            current_statement_begin__ = 138;
            for (int t = 1; t <= T; ++t) {

                current_statement_begin__ = 143;
                stan::model::assign(p, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), 
                            inv_logit(add(multiply(X,stan::model::rvalue(b, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "b")),multiply((get_base1(random_p,t,"random_p",1) * get_base1(s,t,"s",1)),stan::model::rvalue(z, stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(group_p, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "group_p")), stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list())), "z")))), 
                            "assigning variable p");
            }
            current_statement_begin__ = 147;
            stan::math::assign(LL, rep_vector(0,M));
            current_statement_begin__ = 149;
            for (int m = 1; m <= M; ++m) {

                current_statement_begin__ = 151;
                if (as_bool(logical_gt(get_base1(last_minus_first,m,"last_minus_first",1),0))) {

                    current_statement_begin__ = 153;
                    for (int t = (get_base1(first,m,"first",1) + 1); t <= get_base1(last,m,"last",1); ++t) {

                        current_statement_begin__ = 155;
                        stan::model::assign(LL, 
                                    stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(LL, stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), "LL") + (get_base1(n,m,"n",1) * stan::math::log(get_base1(phi,m,(t - 1),"phi",1)))), 
                                    "assigning variable LL");
                        current_statement_begin__ = 156;
                        stan::model::assign(LL, 
                                    stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(LL, stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), "LL") + (get_base1(n,m,"n",1) * bernoulli_log(get_base1(get_base1(y,m,"y",1),t,"y",2),get_base1(p,m,t,"p",1)))), 
                                    "assigning variable LL");
                    }
                }
                current_statement_begin__ = 159;
                stan::model::assign(chi, 
                            stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                            prob_uncaptured(get_base1(last,m,"last",1),stan::model::rvalue(p, stan::model::cons_list(stan::model::index_uni(m), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "p"),stan::model::rvalue(phi, stan::model::cons_list(stan::model::index_uni(m), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "phi"), pstream__), 
                            "assigning variable chi");
                current_statement_begin__ = 160;
                stan::model::assign(LL, 
                            stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), 
                            (stan::model::rvalue(LL, stan::model::cons_list(stan::model::index_uni(m), stan::model::nil_index_list()), "LL") + (get_base1(n,m,"n",1) * stan::math::log(get_base1(chi,m,"chi",1)))), 
                            "assigning variable LL");
            }

            // validate transformed parameters
            current_statement_begin__ = 92;
            current_statement_begin__ = 93;
            current_statement_begin__ = 94;
            current_statement_begin__ = 95;
            current_statement_begin__ = 96;
            current_statement_begin__ = 98;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_1__ = 0; k_1__ < (T - 1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(beta(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < T; ++k_1__) {
                for (int k_0__ = 0; k_0__ < K; ++k_0__) {
                vars__.push_back(b(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < (T - 1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < M; ++k_0__) {
                vars__.push_back(phi(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < T; ++k_1__) {
                for (int k_0__ = 0; k_0__ < M; ++k_0__) {
                vars__.push_back(p(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < M; ++k_0__) {
            vars__.push_back(chi[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < M; ++k_0__) {
            vars__.push_back(LL[k_0__]);
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 187;
            validate_non_negative_index("epsilon", "J_phi", J_phi);
            validate_non_negative_index("epsilon", "(T - 1)", (T - 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  epsilon(static_cast<Eigen::VectorXd::Index>(J_phi),static_cast<Eigen::VectorXd::Index>((T - 1)));
            (void) epsilon;  // dummy to suppress unused var warning

            stan::math::initialize(epsilon, DUMMY_VAR__);
            stan::math::fill(epsilon,DUMMY_VAR__);
            current_statement_begin__ = 188;
            validate_non_negative_index("e", "J_p", J_p);
            validate_non_negative_index("e", "T", T);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  e(static_cast<Eigen::VectorXd::Index>(J_p),static_cast<Eigen::VectorXd::Index>(T));
            (void) e;  // dummy to suppress unused var warning

            stan::math::initialize(e, DUMMY_VAR__);
            stan::math::fill(e,DUMMY_VAR__);


            current_statement_begin__ = 190;
            stan::math::assign(epsilon, diag_post_multiply(zeta,sigma));
            current_statement_begin__ = 191;
            stan::math::assign(e, diag_post_multiply(z,s));

            // validate generated quantities
            current_statement_begin__ = 187;
            current_statement_begin__ = 188;

            // write generated quantities
            for (int k_1__ = 0; k_1__ < (T - 1); ++k_1__) {
                for (int k_0__ = 0; k_0__ < J_phi; ++k_0__) {
                vars__.push_back(epsilon(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < T; ++k_1__) {
                for (int k_0__ = 0; k_0__ < J_p; ++k_0__) {
                vars__.push_back(e(k_0__, k_1__));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_CJS_marray_phiXRE_pXRE_fixNA";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= K_phi; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_vec" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (T - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (T - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J_phi; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "zeta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= K_p; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_vec" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "s" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= T; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J_p; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= (T - 1); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= T; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "b" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= (T - 1); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "phi" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= T; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "p" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "chi" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "LL" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= (T - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J_phi; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "epsilon" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= T; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J_p; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= K_phi; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_vec" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (T - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= (T - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J_phi; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "zeta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= K_p; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_vec" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= T; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "s" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= T; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J_p; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= (T - 1); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= T; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "b" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= (T - 1); ++k_1__) {
                for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "phi" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= T; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "p" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "chi" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "LL" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= (T - 1); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J_phi; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "epsilon" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= T; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= J_p; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "e" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }

}; // model

}

typedef model_CJS_marray_phiXRE_pXRE_fixNA_namespace::model_CJS_marray_phiXRE_pXRE_fixNA stan_model;


#endif
